//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 10 storyboards.
  struct storyboard {
    /// Storyboard `Auth`.
    static let auth = _R.storyboard.auth()
    /// Storyboard `Boxes`.
    static let boxes = _R.storyboard.boxes()
    /// Storyboard `Cart`.
    static let cart = _R.storyboard.cart()
    /// Storyboard `Checkout`.
    static let checkout = _R.storyboard.checkout()
    /// Storyboard `Intro`.
    static let intro = _R.storyboard.intro()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Offers`.
    static let offers = _R.storyboard.offers()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `Wallet`.
    static let wallet = _R.storyboard.wallet()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Auth", bundle: ...)`
    static func auth(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.auth)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Boxes", bundle: ...)`
    static func boxes(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.boxes)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Cart", bundle: ...)`
    static func cart(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.cart)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Checkout", bundle: ...)`
    static func checkout(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.checkout)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Intro", bundle: ...)`
    static func intro(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.intro)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Offers", bundle: ...)`
    static func offers(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.offers)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Wallet", bundle: ...)`
    static func wallet(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.wallet)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 11 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `AppGrayColor`.
    static let appGrayColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppGrayColor")
    /// Color `Maetz-Light-Red`.
    static let maetzLightRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "Maetz-Light-Red")
    /// Color `Meatz-Black`.
    static let meatzBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "Meatz-Black")
    /// Color `Meatz-Error`.
    static let meatzError = Rswift.ColorResource(bundle: R.hostingBundle, name: "Meatz-Error")
    /// Color `Meatz-Gradient`.
    static let meatzGradient = Rswift.ColorResource(bundle: R.hostingBundle, name: "Meatz-Gradient")
    /// Color `Meatz-Red`.
    static let meatzRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "Meatz-Red")
    /// Color `Meatz-Success`.
    static let meatzSuccess = Rswift.ColorResource(bundle: R.hostingBundle, name: "Meatz-Success")
    /// Color `Meatz-Tabbar-Pink`.
    static let meatzTabbarPink = Rswift.ColorResource(bundle: R.hostingBundle, name: "Meatz-Tabbar-Pink")
    /// Color `Meatz-bg`.
    static let meatzBg = Rswift.ColorResource(bundle: R.hostingBundle, name: "Meatz-bg")
    /// Color `lightGray`.
    static let lightGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "lightGray")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppGrayColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appGrayColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appGrayColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Maetz-Light-Red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func maetzLightRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.maetzLightRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Meatz-Black", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func meatzBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.meatzBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Meatz-Error", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func meatzError(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.meatzError, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Meatz-Gradient", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func meatzGradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.meatzGradient, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Meatz-Red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func meatzRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.meatzRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Meatz-Success", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func meatzSuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.meatzSuccess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Meatz-Tabbar-Pink", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func meatzTabbarPink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.meatzTabbarPink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Meatz-bg", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func meatzBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.meatzBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "lightGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AppGrayColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appGrayColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appGrayColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Maetz-Light-Red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func maetzLightRed(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.maetzLightRed.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Meatz-Black", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func meatzBlack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.meatzBlack.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Meatz-Error", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func meatzError(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.meatzError.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Meatz-Gradient", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func meatzGradient(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.meatzGradient.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Meatz-Red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func meatzRed(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.meatzRed.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Meatz-Success", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func meatzSuccess(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.meatzSuccess.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Meatz-Tabbar-Pink", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func meatzTabbarPink(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.meatzTabbarPink.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Meatz-bg", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func meatzBg(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.meatzBg.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "lightGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightGray.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 3 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    struct comAppleDeveloperApplesignin {
      static let `default` = infoPlistString(path: ["com.apple.developer.applesignin"], key: "Default") ?? "Default"

      fileprivate init() {}
    }

    struct comAppleDeveloperAssociatedDomains {
      static let webcredentialsMeatzTestingjunction = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "webcredentials:meatz.testingjunction://") ?? "webcredentials:meatz.testingjunction://"
      static let webcredentialsMeatzTestingjunctionTech = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "webcredentials:meatz.testingjunction.tech://") ?? "webcredentials:meatz.testingjunction.tech://"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 10 files.
  struct file {
    /// Resource file `Almarai-Bold.ttf`.
    static let almaraiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Almarai-Bold", pathExtension: "ttf")
    /// Resource file `Almarai-ExtraBold.ttf`.
    static let almaraiExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Almarai-ExtraBold", pathExtension: "ttf")
    /// Resource file `Almarai-Light.ttf`.
    static let almaraiLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Almarai-Light", pathExtension: "ttf")
    /// Resource file `Almarai-Regular.ttf`.
    static let almaraiRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Almarai-Regular", pathExtension: "ttf")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `OFL.txt`.
    static let oflTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "OFL", pathExtension: "txt")
    /// Resource file `Poppins-Bold.ttf`.
    static let poppinsBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Bold", pathExtension: "ttf")
    /// Resource file `Poppins-Medium.ttf`.
    static let poppinsMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Medium", pathExtension: "ttf")
    /// Resource file `Poppins-Regular.ttf`.
    static let poppinsRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Regular", pathExtension: "ttf")
    /// Resource file `Poppins-SemiBold.ttf`.
    static let poppinsSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-SemiBold", pathExtension: "ttf")

    /// `bundle.url(forResource: "Almarai-Bold", withExtension: "ttf")`
    static func almaraiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.almaraiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Almarai-ExtraBold", withExtension: "ttf")`
    static func almaraiExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.almaraiExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Almarai-Light", withExtension: "ttf")`
    static func almaraiLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.almaraiLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Almarai-Regular", withExtension: "ttf")`
    static func almaraiRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.almaraiRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OFL", withExtension: "txt")`
    static func oflTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.oflTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Bold", withExtension: "ttf")`
    static func poppinsBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Medium", withExtension: "ttf")`
    static func poppinsMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Regular", withExtension: "ttf")`
    static func poppinsRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-SemiBold", withExtension: "ttf")`
    static func poppinsSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 8 fonts.
  struct font: Rswift.Validatable {
    /// Font `Almarai-Bold`.
    static let almaraiBold = Rswift.FontResource(fontName: "Almarai-Bold")
    /// Font `Almarai-ExtraBold`.
    static let almaraiExtraBold = Rswift.FontResource(fontName: "Almarai-ExtraBold")
    /// Font `Almarai-Light`.
    static let almaraiLight = Rswift.FontResource(fontName: "Almarai-Light")
    /// Font `Almarai-Regular`.
    static let almaraiRegular = Rswift.FontResource(fontName: "Almarai-Regular")
    /// Font `Poppins-Bold`.
    static let poppinsBold = Rswift.FontResource(fontName: "Poppins-Bold")
    /// Font `Poppins-Medium`.
    static let poppinsMedium = Rswift.FontResource(fontName: "Poppins-Medium")
    /// Font `Poppins-Regular`.
    static let poppinsRegular = Rswift.FontResource(fontName: "Poppins-Regular")
    /// Font `Poppins-SemiBold`.
    static let poppinsSemiBold = Rswift.FontResource(fontName: "Poppins-SemiBold")

    /// `UIFont(name: "Almarai-Bold", size: ...)`
    static func almaraiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: almaraiBold, size: size)
    }

    /// `UIFont(name: "Almarai-ExtraBold", size: ...)`
    static func almaraiExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: almaraiExtraBold, size: size)
    }

    /// `UIFont(name: "Almarai-Light", size: ...)`
    static func almaraiLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: almaraiLight, size: size)
    }

    /// `UIFont(name: "Almarai-Regular", size: ...)`
    static func almaraiRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: almaraiRegular, size: size)
    }

    /// `UIFont(name: "Poppins-Bold", size: ...)`
    static func poppinsBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBold, size: size)
    }

    /// `UIFont(name: "Poppins-Medium", size: ...)`
    static func poppinsMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsMedium, size: size)
    }

    /// `UIFont(name: "Poppins-Regular", size: ...)`
    static func poppinsRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsRegular, size: size)
    }

    /// `UIFont(name: "Poppins-SemiBold", size: ...)`
    static func poppinsSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsSemiBold, size: size)
    }

    static func validate() throws {
      if R.font.almaraiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Almarai-Bold' could not be loaded, is 'Almarai-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.almaraiExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Almarai-ExtraBold' could not be loaded, is 'Almarai-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.almaraiLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Almarai-Light' could not be loaded, is 'Almarai-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.almaraiRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Almarai-Regular' could not be loaded, is 'Almarai-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Bold' could not be loaded, is 'Poppins-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Medium' could not be loaded, is 'Poppins-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Regular' could not be loaded, is 'Poppins-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-SemiBold' could not be loaded, is 'Poppins-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 106 images.
  struct image {
    /// Image `About Meatz`.
    static let aboutMeatz = Rswift.ImageResource(bundle: R.hostingBundle, name: "About Meatz")
    /// Image `Change Language`.
    static let changeLanguage = Rswift.ImageResource(bundle: R.hostingBundle, name: "Change Language")
    /// Image `Contact us`.
    static let contactUs = Rswift.ImageResource(bundle: R.hostingBundle, name: "Contact us")
    /// Image `Ellipse 19`.
    static let ellipse19 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 19")
    /// Image `F`.
    static let f = Rswift.ImageResource(bundle: R.hostingBundle, name: "F")
    /// Image `Home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home")
    /// Image `I`.
    static let i = Rswift.ImageResource(bundle: R.hostingBundle, name: "I")
    /// Image `Icon awesome-minus1`.
    static let iconAwesomeMinus1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon awesome-minus1")
    /// Image `Icon awesome-minus`.
    static let iconAwesomeMinus = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon awesome-minus")
    /// Image `Icon material-check-box-outline-blank`.
    static let iconMaterialCheckBoxOutlineBlank = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon material-check-box-outline-blank")
    /// Image `Icon open-plus1`.
    static let iconOpenPlus1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon open-plus1")
    /// Image `Icon open-plus`.
    static let iconOpenPlus = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon open-plus")
    /// Image `Lang-selection-bg1`.
    static let langSelectionBg1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Lang-selection-bg1")
    /// Image `Lang-selection-bg`.
    static let langSelectionBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "Lang-selection-bg")
    /// Image `Meat-white`.
    static let meatWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "Meat-white")
    /// Image `Meat`.
    static let meat = Rswift.ImageResource(bundle: R.hostingBundle, name: "Meat")
    /// Image `My Address`.
    static let myAddress = Rswift.ImageResource(bundle: R.hostingBundle, name: "My Address")
    /// Image `My Orders`.
    static let myOrders = Rswift.ImageResource(bundle: R.hostingBundle, name: "My Orders")
    /// Image `No Address1`.
    static let noAddress1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "No Address1")
    /// Image `Not-liked`.
    static let notLiked = Rswift.ImageResource(bundle: R.hostingBundle, name: "Not-liked")
    /// Image `Notifications`.
    static let notifications = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notifications")
    /// Image `Path 17570`.
    static let path17570 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Path 17570")
    /// Image `Path 17724`.
    static let path17724 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Path 17724")
    /// Image `Path 65568`.
    static let path65568 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Path 65568")
    /// Image `Poultry-white`.
    static let poultryWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "Poultry-white")
    /// Image `Poultry`.
    static let poultry = Rswift.ImageResource(bundle: R.hostingBundle, name: "Poultry")
    /// Image `Rectangle 1641`.
    static let rectangle1641 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 1641")
    /// Image `Rectangle 164`.
    static let rectangle164 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 164")
    /// Image `Splash1`.
    static let splash1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Splash1")
    /// Image `Splash`.
    static let splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "Splash")
    /// Image `T`.
    static let t = Rswift.ImageResource(bundle: R.hostingBundle, name: "T")
    /// Image `Terms & Conditions`.
    static let termsConditions = Rswift.ImageResource(bundle: R.hostingBundle, name: "Terms & Conditions")
    /// Image `Wishlist`.
    static let wishlist = Rswift.ImageResource(bundle: R.hostingBundle, name: "Wishlist")
    /// Image `ads`.
    static let ads = Rswift.ImageResource(bundle: R.hostingBundle, name: "ads")
    /// Image `apple1`.
    static let apple1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple1")
    /// Image `apple`.
    static let apple = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple")
    /// Image `back-1`.
    static let back1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "back-1")
    /// Image `back-ar`.
    static let backAr = Rswift.ImageResource(bundle: R.hostingBundle, name: "back-ar")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `bell-1`.
    static let bell1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bell-1")
    /// Image `bell`.
    static let bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "bell")
    /// Image `black-box`.
    static let blackBox = Rswift.ImageResource(bundle: R.hostingBundle, name: "black-box")
    /// Image `blank-Checkbox`.
    static let blankCheckbox = Rswift.ImageResource(bundle: R.hostingBundle, name: "blank-Checkbox")
    /// Image `bottomBox`.
    static let bottomBox = Rswift.ImageResource(bundle: R.hostingBundle, name: "bottomBox")
    /// Image `boxesWarning`.
    static let boxesWarning = Rswift.ImageResource(bundle: R.hostingBundle, name: "boxesWarning")
    /// Image `cart`.
    static let cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart")
    /// Image `close-button1`.
    static let closeButton1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "close-button1")
    /// Image `close-button`.
    static let closeButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "close-button")
    /// Image `delivery-box-1`.
    static let deliveryBox1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "delivery-box-1")
    /// Image `delivery-box`.
    static let deliveryBox = Rswift.ImageResource(bundle: R.hostingBundle, name: "delivery-box")
    /// Image `down`.
    static let down = Rswift.ImageResource(bundle: R.hostingBundle, name: "down")
    /// Image `email`.
    static let email = Rswift.ImageResource(bundle: R.hostingBundle, name: "email")
    /// Image `facebook`.
    static let facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook")
    /// Image `fav1`.
    static let fav1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav1")
    /// Image `fav`.
    static let fav = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav")
    /// Image `filterCheckBox1`.
    static let filterCheckBox1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "filterCheckBox1")
    /// Image `filterCheckBox`.
    static let filterCheckBox = Rswift.ImageResource(bundle: R.hostingBundle, name: "filterCheckBox")
    /// Image `filter`.
    static let filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter")
    /// Image `fish-white`.
    static let fishWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "fish-white")
    /// Image `fish`.
    static let fish = Rswift.ImageResource(bundle: R.hostingBundle, name: "fish")
    /// Image `google1`.
    static let google1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "google1")
    /// Image `google`.
    static let google = Rswift.ImageResource(bundle: R.hostingBundle, name: "google")
    /// Image `guestUser`.
    static let guestUser = Rswift.ImageResource(bundle: R.hostingBundle, name: "guestUser")
    /// Image `homeIcon`.
    static let homeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeIcon")
    /// Image `ic_wallet`.
    static let ic_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_wallet")
    /// Image `ic_white_wallet`.
    static let ic_white_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_white_wallet")
    /// Image `infoIcon`.
    static let infoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "infoIcon")
    /// Image `instagram`.
    static let instagram = Rswift.ImageResource(bundle: R.hostingBundle, name: "instagram")
    /// Image `introLogo1`.
    static let introLogo1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "introLogo1")
    /// Image `introLogo`.
    static let introLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "introLogo")
    /// Image `invalid-code`.
    static let invalidCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "invalid-code")
    /// Image `like`.
    static let like = Rswift.ImageResource(bundle: R.hostingBundle, name: "like")
    /// Image `list empty`.
    static let listEmpty = Rswift.ImageResource(bundle: R.hostingBundle, name: "list empty")
    /// Image `n-seleectRadio`.
    static let nSeleectRadio = Rswift.ImageResource(bundle: R.hostingBundle, name: "n-seleectRadio")
    /// Image `not-found`.
    static let notFound = Rswift.ImageResource(bundle: R.hostingBundle, name: "not-found")
    /// Image `orderError`.
    static let orderError = Rswift.ImageResource(bundle: R.hostingBundle, name: "orderError")
    /// Image `orderSuccess`.
    static let orderSuccess = Rswift.ImageResource(bundle: R.hostingBundle, name: "orderSuccess")
    /// Image `password`.
    static let password = Rswift.ImageResource(bundle: R.hostingBundle, name: "password")
    /// Image `percentage (1)`.
    static let percentage1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "percentage (1)")
    /// Image `place Holder`.
    static let placeHolder = Rswift.ImageResource(bundle: R.hostingBundle, name: "place Holder")
    /// Image `plus-sign-in-circle`.
    static let plusSignInCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus-sign-in-circle")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `promo-applied`.
    static let promoApplied = Rswift.ImageResource(bundle: R.hostingBundle, name: "promo-applied")
    /// Image `reorder1`.
    static let reorder1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "reorder1")
    /// Image `reorder`.
    static let reorder = Rswift.ImageResource(bundle: R.hostingBundle, name: "reorder")
    /// Image `rocket`.
    static let rocket = Rswift.ImageResource(bundle: R.hostingBundle, name: "rocket")
    /// Image `search1`.
    static let search1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "search1")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `selectRadio1`.
    static let selectRadio1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectRadio1")
    /// Image `selectRadio`.
    static let selectRadio = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectRadio")
    /// Image `settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    /// Image `sort`.
    static let sort = Rswift.ImageResource(bundle: R.hostingBundle, name: "sort")
    /// Image `store`.
    static let store = Rswift.ImageResource(bundle: R.hostingBundle, name: "store")
    /// Image `telephone`.
    static let telephone = Rswift.ImageResource(bundle: R.hostingBundle, name: "telephone")
    /// Image `titleLogo`.
    static let titleLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "titleLogo")
    /// Image `topLogo1`.
    static let topLogo1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "topLogo1")
    /// Image `topLogo`.
    static let topLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "topLogo")
    /// Image `trash`.
    static let trash = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash")
    /// Image `twitter`.
    static let twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "twitter")
    /// Image `unchecked`.
    static let unchecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "unchecked")
    /// Image `user (5)`.
    static let user5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "user (5)")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")
    /// Image `warning`.
    static let warning = Rswift.ImageResource(bundle: R.hostingBundle, name: "warning")
    /// Image `whatsapp1`.
    static let whatsapp1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "whatsapp1")
    /// Image `whatsapp`.
    static let whatsapp = Rswift.ImageResource(bundle: R.hostingBundle, name: "whatsapp")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "About Meatz", bundle: ..., traitCollection: ...)`
    static func aboutMeatz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutMeatz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Change Language", bundle: ..., traitCollection: ...)`
    static func changeLanguage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.changeLanguage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Contact us", bundle: ..., traitCollection: ...)`
    static func contactUs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contactUs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 19", bundle: ..., traitCollection: ...)`
    static func ellipse19(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse19, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "F", bundle: ..., traitCollection: ...)`
    static func f(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.f, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "I", bundle: ..., traitCollection: ...)`
    static func i(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.i, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon awesome-minus", bundle: ..., traitCollection: ...)`
    static func iconAwesomeMinus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAwesomeMinus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon awesome-minus1", bundle: ..., traitCollection: ...)`
    static func iconAwesomeMinus1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAwesomeMinus1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon material-check-box-outline-blank", bundle: ..., traitCollection: ...)`
    static func iconMaterialCheckBoxOutlineBlank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMaterialCheckBoxOutlineBlank, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon open-plus", bundle: ..., traitCollection: ...)`
    static func iconOpenPlus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconOpenPlus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon open-plus1", bundle: ..., traitCollection: ...)`
    static func iconOpenPlus1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconOpenPlus1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Lang-selection-bg", bundle: ..., traitCollection: ...)`
    static func langSelectionBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.langSelectionBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Lang-selection-bg1", bundle: ..., traitCollection: ...)`
    static func langSelectionBg1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.langSelectionBg1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Meat", bundle: ..., traitCollection: ...)`
    static func meat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Meat-white", bundle: ..., traitCollection: ...)`
    static func meatWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meatWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "My Address", bundle: ..., traitCollection: ...)`
    static func myAddress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myAddress, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "My Orders", bundle: ..., traitCollection: ...)`
    static func myOrders(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myOrders, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "No Address1", bundle: ..., traitCollection: ...)`
    static func noAddress1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noAddress1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Not-liked", bundle: ..., traitCollection: ...)`
    static func notLiked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notLiked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Notifications", bundle: ..., traitCollection: ...)`
    static func notifications(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notifications, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Path 17570", bundle: ..., traitCollection: ...)`
    static func path17570(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.path17570, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Path 17724", bundle: ..., traitCollection: ...)`
    static func path17724(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.path17724, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Path 65568", bundle: ..., traitCollection: ...)`
    static func path65568(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.path65568, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Poultry", bundle: ..., traitCollection: ...)`
    static func poultry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.poultry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Poultry-white", bundle: ..., traitCollection: ...)`
    static func poultryWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.poultryWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 164", bundle: ..., traitCollection: ...)`
    static func rectangle164(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle164, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 1641", bundle: ..., traitCollection: ...)`
    static func rectangle1641(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle1641, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Splash", bundle: ..., traitCollection: ...)`
    static func splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Splash1", bundle: ..., traitCollection: ...)`
    static func splash1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "T", bundle: ..., traitCollection: ...)`
    static func t(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.t, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Terms & Conditions", bundle: ..., traitCollection: ...)`
    static func termsConditions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.termsConditions, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Wishlist", bundle: ..., traitCollection: ...)`
    static func wishlist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wishlist, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ads", bundle: ..., traitCollection: ...)`
    static func ads(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ads, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "apple", bundle: ..., traitCollection: ...)`
    static func apple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.apple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "apple1", bundle: ..., traitCollection: ...)`
    static func apple1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.apple1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back-1", bundle: ..., traitCollection: ...)`
    static func back1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back-ar", bundle: ..., traitCollection: ...)`
    static func backAr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backAr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bell", bundle: ..., traitCollection: ...)`
    static func bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bell-1", bundle: ..., traitCollection: ...)`
    static func bell1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bell1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "black-box", bundle: ..., traitCollection: ...)`
    static func blackBox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blackBox, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blank-Checkbox", bundle: ..., traitCollection: ...)`
    static func blankCheckbox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blankCheckbox, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bottomBox", bundle: ..., traitCollection: ...)`
    static func bottomBox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bottomBox, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "boxesWarning", bundle: ..., traitCollection: ...)`
    static func boxesWarning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boxesWarning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart", bundle: ..., traitCollection: ...)`
    static func cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close-button", bundle: ..., traitCollection: ...)`
    static func closeButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close-button1", bundle: ..., traitCollection: ...)`
    static func closeButton1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeButton1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delivery-box", bundle: ..., traitCollection: ...)`
    static func deliveryBox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deliveryBox, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delivery-box-1", bundle: ..., traitCollection: ...)`
    static func deliveryBox1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deliveryBox1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "down", bundle: ..., traitCollection: ...)`
    static func down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "email", bundle: ..., traitCollection: ...)`
    static func email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook", bundle: ..., traitCollection: ...)`
    static func facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav", bundle: ..., traitCollection: ...)`
    static func fav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav1", bundle: ..., traitCollection: ...)`
    static func fav1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter", bundle: ..., traitCollection: ...)`
    static func filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filterCheckBox", bundle: ..., traitCollection: ...)`
    static func filterCheckBox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filterCheckBox, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filterCheckBox1", bundle: ..., traitCollection: ...)`
    static func filterCheckBox1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filterCheckBox1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fish", bundle: ..., traitCollection: ...)`
    static func fish(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fish, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fish-white", bundle: ..., traitCollection: ...)`
    static func fishWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fishWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "google", bundle: ..., traitCollection: ...)`
    static func google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "google1", bundle: ..., traitCollection: ...)`
    static func google1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.google1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "guestUser", bundle: ..., traitCollection: ...)`
    static func guestUser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guestUser, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homeIcon", bundle: ..., traitCollection: ...)`
    static func homeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_wallet", bundle: ..., traitCollection: ...)`
    static func ic_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_wallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_white_wallet", bundle: ..., traitCollection: ...)`
    static func ic_white_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_white_wallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "infoIcon", bundle: ..., traitCollection: ...)`
    static func infoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.infoIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "instagram", bundle: ..., traitCollection: ...)`
    static func instagram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.instagram, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "introLogo", bundle: ..., traitCollection: ...)`
    static func introLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.introLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "introLogo1", bundle: ..., traitCollection: ...)`
    static func introLogo1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.introLogo1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "invalid-code", bundle: ..., traitCollection: ...)`
    static func invalidCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.invalidCode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like", bundle: ..., traitCollection: ...)`
    static func like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "list empty", bundle: ..., traitCollection: ...)`
    static func listEmpty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.listEmpty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "n-seleectRadio", bundle: ..., traitCollection: ...)`
    static func nSeleectRadio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nSeleectRadio, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "not-found", bundle: ..., traitCollection: ...)`
    static func notFound(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notFound, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "orderError", bundle: ..., traitCollection: ...)`
    static func orderError(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orderError, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "orderSuccess", bundle: ..., traitCollection: ...)`
    static func orderSuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orderSuccess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "password", bundle: ..., traitCollection: ...)`
    static func password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.password, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "percentage (1)", bundle: ..., traitCollection: ...)`
    static func percentage1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.percentage1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "place Holder", bundle: ..., traitCollection: ...)`
    static func placeHolder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeHolder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus-sign-in-circle", bundle: ..., traitCollection: ...)`
    static func plusSignInCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plusSignInCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "promo-applied", bundle: ..., traitCollection: ...)`
    static func promoApplied(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.promoApplied, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "reorder", bundle: ..., traitCollection: ...)`
    static func reorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "reorder1", bundle: ..., traitCollection: ...)`
    static func reorder1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reorder1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rocket", bundle: ..., traitCollection: ...)`
    static func rocket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rocket, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search1", bundle: ..., traitCollection: ...)`
    static func search1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectRadio", bundle: ..., traitCollection: ...)`
    static func selectRadio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectRadio, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectRadio1", bundle: ..., traitCollection: ...)`
    static func selectRadio1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectRadio1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sort", bundle: ..., traitCollection: ...)`
    static func sort(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sort, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "store", bundle: ..., traitCollection: ...)`
    static func store(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.store, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "telephone", bundle: ..., traitCollection: ...)`
    static func telephone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.telephone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "titleLogo", bundle: ..., traitCollection: ...)`
    static func titleLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.titleLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "topLogo", bundle: ..., traitCollection: ...)`
    static func topLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "topLogo1", bundle: ..., traitCollection: ...)`
    static func topLogo1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topLogo1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trash", bundle: ..., traitCollection: ...)`
    static func trash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "twitter", bundle: ..., traitCollection: ...)`
    static func twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.twitter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unchecked", bundle: ..., traitCollection: ...)`
    static func unchecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unchecked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user (5)", bundle: ..., traitCollection: ...)`
    static func user5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "warning", bundle: ..., traitCollection: ...)`
    static func warning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.warning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "whatsapp", bundle: ..., traitCollection: ...)`
    static func whatsapp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whatsapp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "whatsapp1", bundle: ..., traitCollection: ...)`
    static func whatsapp1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whatsapp1, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `DaysCollectionViewCell`.
    static let daysCollectionViewCell = _R.nib._DaysCollectionViewCell()
    /// Nib `SelctTypeTableViewCell`.
    static let selctTypeTableViewCell = _R.nib._SelctTypeTableViewCell()
    /// Nib `TimesCollectionViewCell`.
    static let timesCollectionViewCell = _R.nib._TimesCollectionViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DaysCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.daysCollectionViewCell) instead")
    static func daysCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.daysCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelctTypeTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selctTypeTableViewCell) instead")
    static func selctTypeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selctTypeTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TimesCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.timesCollectionViewCell) instead")
    static func timesCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.timesCollectionViewCell)
    }
    #endif

    static func daysCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DaysCollectionViewCell? {
      return R.nib.daysCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DaysCollectionViewCell
    }

    static func selctTypeTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelctTypeTableViewCell? {
      return R.nib.selctTypeTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelctTypeTableViewCell
    }

    static func timesCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TimesCollectionViewCell? {
      return R.nib.timesCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TimesCollectionViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 33 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AreaCell`.
    static let areaCell: Rswift.ReuseIdentifier<AreaCell> = Rswift.ReuseIdentifier(identifier: "AreaCell")
    /// Reuse identifier `BannerCell`.
    static let bannerCell: Rswift.ReuseIdentifier<BannerCell> = Rswift.ReuseIdentifier(identifier: "BannerCell")
    /// Reuse identifier `BoxProductsViewCell`.
    static let boxProductsViewCell: Rswift.ReuseIdentifier<BoxProductsViewCell> = Rswift.ReuseIdentifier(identifier: "BoxProductsViewCell")
    /// Reuse identifier `BoxesViewCell`.
    static let boxesViewCell: Rswift.ReuseIdentifier<BoxesViewCell> = Rswift.ReuseIdentifier(identifier: "BoxesViewCell")
    /// Reuse identifier `CartBoxViewCell`.
    static let cartBoxViewCell: Rswift.ReuseIdentifier<CartBoxViewCell> = Rswift.ReuseIdentifier(identifier: "CartBoxViewCell")
    /// Reuse identifier `CartProductViewCell`.
    static let cartProductViewCell: Rswift.ReuseIdentifier<CartProductViewCell> = Rswift.ReuseIdentifier(identifier: "CartProductViewCell")
    /// Reuse identifier `DaysCollectionViewCell`.
    static let daysCollectionViewCell: Rswift.ReuseIdentifier<DaysCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "DaysCollectionViewCell")
    /// Reuse identifier `FilterTableViewCell`.
    static let filterTableViewCell: Rswift.ReuseIdentifier<FilterTableViewCell> = Rswift.ReuseIdentifier(identifier: "FilterTableViewCell")
    /// Reuse identifier `HomeBoxCell`.
    static let homeBoxCell: Rswift.ReuseIdentifier<HomeBoxCell> = Rswift.ReuseIdentifier(identifier: "HomeBoxCell")
    /// Reuse identifier `MultiOptionsCell`.
    static let multiOptionsCell: Rswift.ReuseIdentifier<MultiOptionsCell> = Rswift.ReuseIdentifier(identifier: "MultiOptionsCell")
    /// Reuse identifier `MyAddressCell`.
    static let myAddressCell: Rswift.ReuseIdentifier<MyAddressCell> = Rswift.ReuseIdentifier(identifier: "MyAddressCell")
    /// Reuse identifier `MyOrdersCell`.
    static let myOrdersCell: Rswift.ReuseIdentifier<MyOrdersCell> = Rswift.ReuseIdentifier(identifier: "MyOrdersCell")
    /// Reuse identifier `NoBoxCell`.
    static let noBoxCell: Rswift.ReuseIdentifier<NoBoxCell> = Rswift.ReuseIdentifier(identifier: "NoBoxCell")
    /// Reuse identifier `NotificationCell`.
    static let notificationCell: Rswift.ReuseIdentifier<NotificationCell> = Rswift.ReuseIdentifier(identifier: "NotificationCell")
    /// Reuse identifier `OfferDetailsTableViewCell`.
    static let offerDetailsTableViewCell: Rswift.ReuseIdentifier<OfferDetailsTableViewCell> = Rswift.ReuseIdentifier(identifier: "OfferDetailsTableViewCell")
    /// Reuse identifier `OfferTableViewCell`.
    static let offerTableViewCell: Rswift.ReuseIdentifier<OfferTableViewCell> = Rswift.ReuseIdentifier(identifier: "OfferTableViewCell")
    /// Reuse identifier `OffersCategoryCell`.
    static let offersCategoryCell: Rswift.ReuseIdentifier<OffersCategoryCell> = Rswift.ReuseIdentifier(identifier: "OffersCategoryCell")
    /// Reuse identifier `OrderBoxCell`.
    static let orderBoxCell: Rswift.ReuseIdentifier<OrderBoxCell> = Rswift.ReuseIdentifier(identifier: "OrderBoxCell")
    /// Reuse identifier `OrderProductCell`.
    static let orderProductCell: Rswift.ReuseIdentifier<OrderProductCell> = Rswift.ReuseIdentifier(identifier: "OrderProductCell")
    /// Reuse identifier `OurBoxesCell`.
    static let ourBoxesCell: Rswift.ReuseIdentifier<OurBoxesCell> = Rswift.ReuseIdentifier(identifier: "OurBoxesCell")
    /// Reuse identifier `ProductCell`.
    static let productCell: Rswift.ReuseIdentifier<ProductCell> = Rswift.ReuseIdentifier(identifier: "ProductCell")
    /// Reuse identifier `ProductOptionCell`.
    static let productOptionCell: Rswift.ReuseIdentifier<ProductOptionCell> = Rswift.ReuseIdentifier(identifier: "ProductOptionCell")
    /// Reuse identifier `ProfileMenuCell`.
    static let profileMenuCell: Rswift.ReuseIdentifier<ProfileMenuCell> = Rswift.ReuseIdentifier(identifier: "ProfileMenuCell")
    /// Reuse identifier `SearchItemCell`.
    static let searchItemCell: Rswift.ReuseIdentifier<SearchItemCell> = Rswift.ReuseIdentifier(identifier: "SearchItemCell")
    /// Reuse identifier `SearchStoreCell`.
    static let searchStoreCell: Rswift.ReuseIdentifier<SearchStoreCell> = Rswift.ReuseIdentifier(identifier: "SearchStoreCell")
    /// Reuse identifier `SelctTypeTableViewCell`.
    static let selctTypeTableViewCell: Rswift.ReuseIdentifier<SelctTypeTableViewCell> = Rswift.ReuseIdentifier(identifier: "SelctTypeTableViewCell")
    /// Reuse identifier `SettingsViewCell`.
    static let settingsViewCell: Rswift.ReuseIdentifier<SettingsViewCell> = Rswift.ReuseIdentifier(identifier: "SettingsViewCell")
    /// Reuse identifier `ShopCategoryCell`.
    static let shopCategoryCell: Rswift.ReuseIdentifier<ShopCategoryCell> = Rswift.ReuseIdentifier(identifier: "ShopCategoryCell")
    /// Reuse identifier `ShopCell`.
    static let shopCell: Rswift.ReuseIdentifier<ShopCell> = Rswift.ReuseIdentifier(identifier: "ShopCell")
    /// Reuse identifier `SortTableViewCell`.
    static let sortTableViewCell: Rswift.ReuseIdentifier<SortTableViewCell> = Rswift.ReuseIdentifier(identifier: "SortTableViewCell")
    /// Reuse identifier `TimesCollectionViewCell`.
    static let timesCollectionViewCell: Rswift.ReuseIdentifier<TimesCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "TimesCollectionViewCell")
    /// Reuse identifier `WalletCollectionViewCell`.
    static let walletCollectionViewCell: Rswift.ReuseIdentifier<WalletCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "WalletCollectionViewCell")
    /// Reuse identifier `WishlistCell`.
    static let wishlistCell: Rswift.ReuseIdentifier<WishlistCell> = Rswift.ReuseIdentifier(identifier: "WishlistCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 11 localization tables.
  struct string {
    /// This `R.string.auth` struct is generated, and contains static references to 27 localization keys.
    struct auth {
      /// ar translation:  سجل الآن
      ///
      /// Locales: ar
      static let vFhNlXpBNormalTitle = Rswift.StringResource(key: "VFh-nl-XpB.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أوافق علي جميع سياسات الخصوصية و الشروط و الأحكام تسجيل 
      ///
      /// Locales: ar
      static let p1VIyLEiText = Rswift.StringResource(key: "p1V-Iy-lEi.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إرسال كلمة المرور
      ///
      /// Locales: ar
      static let bg9BUBUkNormalTitle = Rswift.StringResource(key: "bg9-bU-BUk.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاستمرار كزائر
      ///
      /// Locales: ar
      static let xmDDPLLlNormalTitle = Rswift.StringResource(key: "XmD-dP-LLl.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاسم الأخير
      ///
      /// Locales: ar
      static let zBeEC1icPlaceholder = Rswift.StringResource(key: "ZBe-EC-1ic.placeholder", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاسم الأول
      ///
      /// Locales: ar
      static let vOo9pBc1Placeholder = Rswift.StringResource(key: "VOo-9p-bc1.placeholder", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: البريد الإلكترونى
      ///
      /// Locales: ar
      static let bo1DvGU7Placeholder = Rswift.StringResource(key: "BO1-Dv-gU7.placeholder", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: البريد الإلكترونى
      ///
      /// Locales: ar
      static let gGJ71D0uPlaceholder = Rswift.StringResource(key: "gGJ-71-D0u.placeholder", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: البريد الإلكترونى 
      ///
      /// Locales: ar
      static let uJXAB0gSPlaceholder = Rswift.StringResource(key: "uJX-AB-0gS.placeholder", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: او
      ///
      /// Locales: ar
      static let nm8IwZrNText = Rswift.StringResource(key: "Nm8-iw-ZrN.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: او
      ///
      /// Locales: ar
      static let nnLAH5xnText = Rswift.StringResource(key: "nnL-AH-5xn.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: او
      ///
      /// Locales: ar
      static let tlhysoeText = Rswift.StringResource(key: "6TL-hY-SOE.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تأكيد كلمة المرور
      ///
      /// Locales: ar
      static let rmpBI4oJPlaceholder = Rswift.StringResource(key: "rmp-bI-4oJ.placeholder", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجيل
      ///
      /// Locales: ar
      static let fiBBb6LgNormalTitle = Rswift.StringResource(key: "fiB-bb-6Lg.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجيل
      ///
      /// Locales: ar
      static let q0ZTWOZgText = Rswift.StringResource(key: "Q0Z-tW-oZg.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجيل الدخول
      ///
      /// Locales: ar
      static let lcb3gXK2NormalTitle = Rswift.StringResource(key: "lcb-3g-xK2.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجيل الدخول
      ///
      /// Locales: ar
      static let pcUaWezText = Rswift.StringResource(key: "2Pc-Ua-Wez.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجيل الدخول
      ///
      /// Locales: ar
      static let ugwwMtuNormalTitle = Rswift.StringResource(key: "9UG-wW-mtu.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجيل الدخول من خلال
      ///
      /// Locales: ar
      static let mT8VMEtOText = Rswift.StringResource(key: "mT8-vM-EtO.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الهاتف
      ///
      /// Locales: ar
      static let qTsKOSgePlaceholder = Rswift.StringResource(key: "QTs-kO-Sge.placeholder", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: كلمة المرور
      ///
      /// Locales: ar
      static let rQjWDA7hPlaceholder = Rswift.StringResource(key: "RQj-wD-A7h.placeholder", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: كلمة المرور
      ///
      /// Locales: ar
      static let v2A4P4thPlaceholder = Rswift.StringResource(key: "v2A-4P-4th.placeholder", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: لا تملك حساب؟
      ///
      /// Locales: ar
      static let gsmTfQLoText = Rswift.StringResource(key: "GSM-Tf-qLo.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: نسيت كلمة المرور؟
      ///
      /// Locales: ar
      static let hHwOuWCsNormalTitle = Rswift.StringResource(key: "HHw-ou-wCs.normalTitle", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: نسيت كلمة المرور؟
      ///
      /// Locales: ar
      static let k9QLNXOOText = Rswift.StringResource(key: "K9Q-lN-XOO.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: هل لديك حساب ؟
      ///
      /// Locales: ar
      static let vhlhsi5zText = Rswift.StringResource(key: "VHL-HS-I5z.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: يرجى إدخال عنوان البريد الإلكترونى الذي قمت بالتسجيل به
      ///
      /// Locales: ar
      static let bkGSI0hlText = Rswift.StringResource(key: "bkG-sI-0hl.text", tableName: "Auth", bundle: R.hostingBundle, locales: ["ar"], comment: nil)

      /// ar translation:  سجل الآن
      ///
      /// Locales: ar
      static func vFhNlXpBNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VFh-nl-XpB.normalTitle", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "VFh-nl-XpB.normalTitle"
        }

        return NSLocalizedString("VFh-nl-XpB.normalTitle", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: أوافق علي جميع سياسات الخصوصية و الشروط و الأحكام تسجيل 
      ///
      /// Locales: ar
      static func p1VIyLEiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p1V-Iy-lEi.text", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "p1V-Iy-lEi.text"
        }

        return NSLocalizedString("p1V-Iy-lEi.text", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: إرسال كلمة المرور
      ///
      /// Locales: ar
      static func bg9BUBUkNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bg9-bU-BUk.normalTitle", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "bg9-bU-BUk.normalTitle"
        }

        return NSLocalizedString("bg9-bU-BUk.normalTitle", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: الاستمرار كزائر
      ///
      /// Locales: ar
      static func xmDDPLLlNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XmD-dP-LLl.normalTitle", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "XmD-dP-LLl.normalTitle"
        }

        return NSLocalizedString("XmD-dP-LLl.normalTitle", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: الاسم الأخير
      ///
      /// Locales: ar
      static func zBeEC1icPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZBe-EC-1ic.placeholder", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "ZBe-EC-1ic.placeholder"
        }

        return NSLocalizedString("ZBe-EC-1ic.placeholder", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: الاسم الأول
      ///
      /// Locales: ar
      static func vOo9pBc1Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VOo-9p-bc1.placeholder", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "VOo-9p-bc1.placeholder"
        }

        return NSLocalizedString("VOo-9p-bc1.placeholder", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: البريد الإلكترونى
      ///
      /// Locales: ar
      static func bo1DvGU7Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BO1-Dv-gU7.placeholder", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "BO1-Dv-gU7.placeholder"
        }

        return NSLocalizedString("BO1-Dv-gU7.placeholder", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: البريد الإلكترونى
      ///
      /// Locales: ar
      static func gGJ71D0uPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gGJ-71-D0u.placeholder", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "gGJ-71-D0u.placeholder"
        }

        return NSLocalizedString("gGJ-71-D0u.placeholder", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: البريد الإلكترونى 
      ///
      /// Locales: ar
      static func uJXAB0gSPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uJX-AB-0gS.placeholder", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "uJX-AB-0gS.placeholder"
        }

        return NSLocalizedString("uJX-AB-0gS.placeholder", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: او
      ///
      /// Locales: ar
      static func nm8IwZrNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nm8-iw-ZrN.text", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "Nm8-iw-ZrN.text"
        }

        return NSLocalizedString("Nm8-iw-ZrN.text", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: او
      ///
      /// Locales: ar
      static func nnLAH5xnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nnL-AH-5xn.text", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "nnL-AH-5xn.text"
        }

        return NSLocalizedString("nnL-AH-5xn.text", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: او
      ///
      /// Locales: ar
      static func tlhysoeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6TL-hY-SOE.text", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "6TL-hY-SOE.text"
        }

        return NSLocalizedString("6TL-hY-SOE.text", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: تأكيد كلمة المرور
      ///
      /// Locales: ar
      static func rmpBI4oJPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rmp-bI-4oJ.placeholder", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "rmp-bI-4oJ.placeholder"
        }

        return NSLocalizedString("rmp-bI-4oJ.placeholder", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: تسجيل
      ///
      /// Locales: ar
      static func fiBBb6LgNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fiB-bb-6Lg.normalTitle", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "fiB-bb-6Lg.normalTitle"
        }

        return NSLocalizedString("fiB-bb-6Lg.normalTitle", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: تسجيل
      ///
      /// Locales: ar
      static func q0ZTWOZgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Q0Z-tW-oZg.text", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "Q0Z-tW-oZg.text"
        }

        return NSLocalizedString("Q0Z-tW-oZg.text", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: تسجيل الدخول
      ///
      /// Locales: ar
      static func lcb3gXK2NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lcb-3g-xK2.normalTitle", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "lcb-3g-xK2.normalTitle"
        }

        return NSLocalizedString("lcb-3g-xK2.normalTitle", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: تسجيل الدخول
      ///
      /// Locales: ar
      static func pcUaWezText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2Pc-Ua-Wez.text", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "2Pc-Ua-Wez.text"
        }

        return NSLocalizedString("2Pc-Ua-Wez.text", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: تسجيل الدخول
      ///
      /// Locales: ar
      static func ugwwMtuNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9UG-wW-mtu.normalTitle", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "9UG-wW-mtu.normalTitle"
        }

        return NSLocalizedString("9UG-wW-mtu.normalTitle", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: تسجيل الدخول من خلال
      ///
      /// Locales: ar
      static func mT8VMEtOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mT8-vM-EtO.text", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "mT8-vM-EtO.text"
        }

        return NSLocalizedString("mT8-vM-EtO.text", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الهاتف
      ///
      /// Locales: ar
      static func qTsKOSgePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QTs-kO-Sge.placeholder", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "QTs-kO-Sge.placeholder"
        }

        return NSLocalizedString("QTs-kO-Sge.placeholder", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: كلمة المرور
      ///
      /// Locales: ar
      static func rQjWDA7hPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RQj-wD-A7h.placeholder", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "RQj-wD-A7h.placeholder"
        }

        return NSLocalizedString("RQj-wD-A7h.placeholder", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: كلمة المرور
      ///
      /// Locales: ar
      static func v2A4P4thPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("v2A-4P-4th.placeholder", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "v2A-4P-4th.placeholder"
        }

        return NSLocalizedString("v2A-4P-4th.placeholder", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: لا تملك حساب؟
      ///
      /// Locales: ar
      static func gsmTfQLoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GSM-Tf-qLo.text", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "GSM-Tf-qLo.text"
        }

        return NSLocalizedString("GSM-Tf-qLo.text", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: نسيت كلمة المرور؟
      ///
      /// Locales: ar
      static func hHwOuWCsNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HHw-ou-wCs.normalTitle", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "HHw-ou-wCs.normalTitle"
        }

        return NSLocalizedString("HHw-ou-wCs.normalTitle", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: نسيت كلمة المرور؟
      ///
      /// Locales: ar
      static func k9QLNXOOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("K9Q-lN-XOO.text", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "K9Q-lN-XOO.text"
        }

        return NSLocalizedString("K9Q-lN-XOO.text", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: هل لديك حساب ؟
      ///
      /// Locales: ar
      static func vhlhsi5zText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VHL-HS-I5z.text", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "VHL-HS-I5z.text"
        }

        return NSLocalizedString("VHL-HS-I5z.text", tableName: "Auth", bundle: bundle, comment: "")
      }

      /// ar translation: يرجى إدخال عنوان البريد الإلكترونى الذي قمت بالتسجيل به
      ///
      /// Locales: ar
      static func bkGSI0hlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bkG-sI-0hl.text", tableName: "Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Auth", preferredLanguages: preferredLanguages) else {
          return "bkG-sI-0hl.text"
        }

        return NSLocalizedString("bkG-sI-0hl.text", tableName: "Auth", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.boxes` struct is generated, and contains static references to 21 localization keys.
    struct boxes {
      /// ar translation: 
      ///
      /// Locales: ar
      static let dn1R20zFText = Rswift.StringResource(key: "Dn1-r2-0zF.text", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let drt5mV9YText = Rswift.StringResource(key: "drt-5m-v9Y.text", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let eDIUrXTbText = Rswift.StringResource(key: "eDI-Ur-XTb.text", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let j2uDwV97Text = Rswift.StringResource(key: "J2u-dw-V97.text", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let jA7HgYPmText = Rswift.StringResource(key: "jA7-Hg-yPm.text", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let l9tAx2AYText = Rswift.StringResource(key: "l9t-ax-2AY.text", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let roD9Z5OBText = Rswift.StringResource(key: "roD-9Z-5OB.text", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let sUOKJ6jGText = Rswift.StringResource(key: "sUO-KJ-6jG.text", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let xDeFB0DyText = Rswift.StringResource(key: "XDe-FB-0Dy.text", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أضف الى السلة
      ///
      /// Locales: ar
      static let iud74FbRNormalTitle = Rswift.StringResource(key: "Iud-74-fbR.normalTitle", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إضافة صندوق
      ///
      /// Locales: ar
      static let prAYOYtNormalTitle = Rswift.StringResource(key: "4pr-AY-OYt.normalTitle", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إنشاء صندوق جديد
      ///
      /// Locales: ar
      static let dcunXjCText = Rswift.StringResource(key: "1DC-uN-xjC.text", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم الصندوق
      ///
      /// Locales: ar
      static let u7MkYw1Placeholder = Rswift.StringResource(key: "7u7-Mk-Yw1.placeholder", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الكمية :
      ///
      /// Locales: ar
      static let h2QVRFUxText = Rswift.StringResource(key: "h2Q-VR-FUx.text", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: المنتجات :
      ///
      /// Locales: ar
      static let dZdUaAfVText = Rswift.StringResource(key: "dZd-ua-afV.text", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تحديث
      ///
      /// Locales: ar
      static let xe7Uf8zGNormalTitle = Rswift.StringResource(key: "xe7-Uf-8zG.normalTitle", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجيل الدخول
      ///
      /// Locales: ar
      static let vZvO0YxZNormalTitle = Rswift.StringResource(key: "VZv-O0-yxZ.normalTitle", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عرض
      ///
      /// Locales: ar
      static let kfKZnGhXNormalTitle = Rswift.StringResource(key: "kfK-Zn-GhX.normalTitle", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: لا يوجد صناديق مضافة حاليا يرجى إضافة صندوق جديد
      ///
      /// Locales: ar
      static let aYVT0HIBText = Rswift.StringResource(key: "aYV-t0-HIB.text", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: لا يوجد منتجات داخل الصندوق
      ///
      /// Locales: ar
      static let wRI5VQpyText = Rswift.StringResource(key: "wRI-5V-Qpy.text", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: يرجى تسجيل الدخول اولاً
      ///
      /// Locales: ar
      static let yBoUpDoLText = Rswift.StringResource(key: "YBo-Up-DoL.text", tableName: "Boxes", bundle: R.hostingBundle, locales: ["ar"], comment: nil)

      /// ar translation: 
      ///
      /// Locales: ar
      static func dn1R20zFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dn1-r2-0zF.text", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "Dn1-r2-0zF.text"
        }

        return NSLocalizedString("Dn1-r2-0zF.text", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func drt5mV9YText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("drt-5m-v9Y.text", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "drt-5m-v9Y.text"
        }

        return NSLocalizedString("drt-5m-v9Y.text", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func eDIUrXTbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eDI-Ur-XTb.text", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "eDI-Ur-XTb.text"
        }

        return NSLocalizedString("eDI-Ur-XTb.text", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func j2uDwV97Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("J2u-dw-V97.text", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "J2u-dw-V97.text"
        }

        return NSLocalizedString("J2u-dw-V97.text", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func jA7HgYPmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jA7-Hg-yPm.text", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "jA7-Hg-yPm.text"
        }

        return NSLocalizedString("jA7-Hg-yPm.text", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func l9tAx2AYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("l9t-ax-2AY.text", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "l9t-ax-2AY.text"
        }

        return NSLocalizedString("l9t-ax-2AY.text", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func roD9Z5OBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("roD-9Z-5OB.text", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "roD-9Z-5OB.text"
        }

        return NSLocalizedString("roD-9Z-5OB.text", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func sUOKJ6jGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sUO-KJ-6jG.text", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "sUO-KJ-6jG.text"
        }

        return NSLocalizedString("sUO-KJ-6jG.text", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func xDeFB0DyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XDe-FB-0Dy.text", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "XDe-FB-0Dy.text"
        }

        return NSLocalizedString("XDe-FB-0Dy.text", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: أضف الى السلة
      ///
      /// Locales: ar
      static func iud74FbRNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Iud-74-fbR.normalTitle", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "Iud-74-fbR.normalTitle"
        }

        return NSLocalizedString("Iud-74-fbR.normalTitle", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: إضافة صندوق
      ///
      /// Locales: ar
      static func prAYOYtNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4pr-AY-OYt.normalTitle", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "4pr-AY-OYt.normalTitle"
        }

        return NSLocalizedString("4pr-AY-OYt.normalTitle", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: إنشاء صندوق جديد
      ///
      /// Locales: ar
      static func dcunXjCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1DC-uN-xjC.text", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "1DC-uN-xjC.text"
        }

        return NSLocalizedString("1DC-uN-xjC.text", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: اسم الصندوق
      ///
      /// Locales: ar
      static func u7MkYw1Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7u7-Mk-Yw1.placeholder", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "7u7-Mk-Yw1.placeholder"
        }

        return NSLocalizedString("7u7-Mk-Yw1.placeholder", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: الكمية :
      ///
      /// Locales: ar
      static func h2QVRFUxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("h2Q-VR-FUx.text", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "h2Q-VR-FUx.text"
        }

        return NSLocalizedString("h2Q-VR-FUx.text", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: المنتجات :
      ///
      /// Locales: ar
      static func dZdUaAfVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dZd-ua-afV.text", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "dZd-ua-afV.text"
        }

        return NSLocalizedString("dZd-ua-afV.text", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: تحديث
      ///
      /// Locales: ar
      static func xe7Uf8zGNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xe7-Uf-8zG.normalTitle", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "xe7-Uf-8zG.normalTitle"
        }

        return NSLocalizedString("xe7-Uf-8zG.normalTitle", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: تسجيل الدخول
      ///
      /// Locales: ar
      static func vZvO0YxZNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VZv-O0-yxZ.normalTitle", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "VZv-O0-yxZ.normalTitle"
        }

        return NSLocalizedString("VZv-O0-yxZ.normalTitle", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: عرض
      ///
      /// Locales: ar
      static func kfKZnGhXNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kfK-Zn-GhX.normalTitle", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "kfK-Zn-GhX.normalTitle"
        }

        return NSLocalizedString("kfK-Zn-GhX.normalTitle", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: لا يوجد صناديق مضافة حاليا يرجى إضافة صندوق جديد
      ///
      /// Locales: ar
      static func aYVT0HIBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aYV-t0-HIB.text", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "aYV-t0-HIB.text"
        }

        return NSLocalizedString("aYV-t0-HIB.text", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: لا يوجد منتجات داخل الصندوق
      ///
      /// Locales: ar
      static func wRI5VQpyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wRI-5V-Qpy.text", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "wRI-5V-Qpy.text"
        }

        return NSLocalizedString("wRI-5V-Qpy.text", tableName: "Boxes", bundle: bundle, comment: "")
      }

      /// ar translation: يرجى تسجيل الدخول اولاً
      ///
      /// Locales: ar
      static func yBoUpDoLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YBo-Up-DoL.text", tableName: "Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Boxes", preferredLanguages: preferredLanguages) else {
          return "YBo-Up-DoL.text"
        }

        return NSLocalizedString("YBo-Up-DoL.text", tableName: "Boxes", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.cart` struct is generated, and contains static references to 25 localization keys.
    struct cart {
      /// ar translation: 
      ///
      /// Locales: ar
      static let c35UQKqUText = Rswift.StringResource(key: "c35-uQ-kqU.text", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let ej2VzWB3Text = Rswift.StringResource(key: "EJ2-Vz-wB3.text", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let fUaZyME1Text = Rswift.StringResource(key: "FUa-Zy-ME1.text", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let k8gZ7LPiText = Rswift.StringResource(key: "k8g-z7-lPi.text", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let nsx2sWFlText = Rswift.StringResource(key: "Nsx-2s-WFl.text", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let ojjUfLefText = Rswift.StringResource(key: "Ojj-Uf-lef.text", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let z9UNN97zText = Rswift.StringResource(key: "Z9U-NN-97z.text", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 000.0
      ///
      /// Locales: ar
      static let abyRH3gXText = Rswift.StringResource(key: "Aby-RH-3gX.text", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 000.0
      ///
      /// Locales: ar
      static let dM9XdRLUText = Rswift.StringResource(key: "dM9-Xd-RLU.text", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 000.0
      ///
      /// Locales: ar
      static let jL4NQZB8Text = Rswift.StringResource(key: "jL4-NQ-zB8.text", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 1
      ///
      /// Locales: ar
      static let fud2TStOText = Rswift.StringResource(key: "fud-2T-stO.text", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 1
      ///
      /// Locales: ar
      static let rYaIgH1JText = Rswift.StringResource(key: "rYa-Ig-h1J.text", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إجمالى المنتجات
      ///
      /// Locales: ar
      static let mAwFMH66Text = Rswift.StringResource(key: "mAw-FM-H66.text", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إضافة
      ///
      /// Locales: ar
      static let ji306KOCNormalTitle = Rswift.StringResource(key: "ji3-06-KOC.normalTitle", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إضافة رقم الهاتف
      ///
      /// Locales: ar
      static let tAqEVIo7Text = Rswift.StringResource(key: "TAq-eV-io7.text", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إلغاء
      ///
      /// Locales: ar
      static let kFfUfWNormalTitle = Rswift.StringResource(key: "28k-Ff-UfW.normalTitle", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاستمرار في التسوق
      ///
      /// Locales: ar
      static let wTnHtLceNormalTitle = Rswift.StringResource(key: "wTn-ht-Lce.normalTitle", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاستمرار كزائر
      ///
      /// Locales: ar
      static let iPc5TDzyNormalTitle = Rswift.StringResource(key: "IPc-5T-Dzy.normalTitle", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاستمرار للدفع
      ///
      /// Locales: ar
      static let nDv0wJPfNormalTitle = Rswift.StringResource(key: "NDv-0w-JPf.normalTitle", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: المجموع الفرعى
      ///
      /// Locales: ar
      static let vheopOioText = Rswift.StringResource(key: "VHE-OP-oio.text", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجيل الدخول
      ///
      /// Locales: ar
      static let lj5NxIbgNormalTitle = Rswift.StringResource(key: "Lj5-Nx-Ibg.normalTitle", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رسوم التوصيل
      ///
      /// Locales: ar
      static let wvRW3CaHText = Rswift.StringResource(key: "wvR-w3-CaH.text", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الهاتف*
      ///
      /// Locales: ar
      static let cf5D4EngPlaceholder = Rswift.StringResource(key: "Cf5-d4-eng.placeholder", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: سلة المشتريات
      ///
      /// Locales: ar
      static let sR8QvPText = Rswift.StringResource(key: "24s-r8-qvP.text", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: منتج في السلة
      ///
      /// Locales: ar
      static let nsQ5TEIbText = Rswift.StringResource(key: "NsQ-5T-eIb.text", tableName: "Cart", bundle: R.hostingBundle, locales: ["ar"], comment: nil)

      /// ar translation: 
      ///
      /// Locales: ar
      static func c35UQKqUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("c35-uQ-kqU.text", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "c35-uQ-kqU.text"
        }

        return NSLocalizedString("c35-uQ-kqU.text", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func ej2VzWB3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EJ2-Vz-wB3.text", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "EJ2-Vz-wB3.text"
        }

        return NSLocalizedString("EJ2-Vz-wB3.text", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func fUaZyME1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FUa-Zy-ME1.text", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "FUa-Zy-ME1.text"
        }

        return NSLocalizedString("FUa-Zy-ME1.text", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func k8gZ7LPiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("k8g-z7-lPi.text", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "k8g-z7-lPi.text"
        }

        return NSLocalizedString("k8g-z7-lPi.text", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func nsx2sWFlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nsx-2s-WFl.text", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "Nsx-2s-WFl.text"
        }

        return NSLocalizedString("Nsx-2s-WFl.text", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func ojjUfLefText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ojj-Uf-lef.text", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "Ojj-Uf-lef.text"
        }

        return NSLocalizedString("Ojj-Uf-lef.text", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func z9UNN97zText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Z9U-NN-97z.text", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "Z9U-NN-97z.text"
        }

        return NSLocalizedString("Z9U-NN-97z.text", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: 000.0
      ///
      /// Locales: ar
      static func abyRH3gXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Aby-RH-3gX.text", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "Aby-RH-3gX.text"
        }

        return NSLocalizedString("Aby-RH-3gX.text", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: 000.0
      ///
      /// Locales: ar
      static func dM9XdRLUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dM9-Xd-RLU.text", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "dM9-Xd-RLU.text"
        }

        return NSLocalizedString("dM9-Xd-RLU.text", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: 000.0
      ///
      /// Locales: ar
      static func jL4NQZB8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jL4-NQ-zB8.text", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "jL4-NQ-zB8.text"
        }

        return NSLocalizedString("jL4-NQ-zB8.text", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: 1
      ///
      /// Locales: ar
      static func fud2TStOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fud-2T-stO.text", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "fud-2T-stO.text"
        }

        return NSLocalizedString("fud-2T-stO.text", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: 1
      ///
      /// Locales: ar
      static func rYaIgH1JText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rYa-Ig-h1J.text", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "rYa-Ig-h1J.text"
        }

        return NSLocalizedString("rYa-Ig-h1J.text", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: إجمالى المنتجات
      ///
      /// Locales: ar
      static func mAwFMH66Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mAw-FM-H66.text", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "mAw-FM-H66.text"
        }

        return NSLocalizedString("mAw-FM-H66.text", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: إضافة
      ///
      /// Locales: ar
      static func ji306KOCNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ji3-06-KOC.normalTitle", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "ji3-06-KOC.normalTitle"
        }

        return NSLocalizedString("ji3-06-KOC.normalTitle", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: إضافة رقم الهاتف
      ///
      /// Locales: ar
      static func tAqEVIo7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TAq-eV-io7.text", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "TAq-eV-io7.text"
        }

        return NSLocalizedString("TAq-eV-io7.text", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: إلغاء
      ///
      /// Locales: ar
      static func kFfUfWNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("28k-Ff-UfW.normalTitle", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "28k-Ff-UfW.normalTitle"
        }

        return NSLocalizedString("28k-Ff-UfW.normalTitle", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: الاستمرار في التسوق
      ///
      /// Locales: ar
      static func wTnHtLceNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wTn-ht-Lce.normalTitle", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "wTn-ht-Lce.normalTitle"
        }

        return NSLocalizedString("wTn-ht-Lce.normalTitle", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: الاستمرار كزائر
      ///
      /// Locales: ar
      static func iPc5TDzyNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IPc-5T-Dzy.normalTitle", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "IPc-5T-Dzy.normalTitle"
        }

        return NSLocalizedString("IPc-5T-Dzy.normalTitle", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: الاستمرار للدفع
      ///
      /// Locales: ar
      static func nDv0wJPfNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NDv-0w-JPf.normalTitle", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "NDv-0w-JPf.normalTitle"
        }

        return NSLocalizedString("NDv-0w-JPf.normalTitle", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: المجموع الفرعى
      ///
      /// Locales: ar
      static func vheopOioText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VHE-OP-oio.text", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "VHE-OP-oio.text"
        }

        return NSLocalizedString("VHE-OP-oio.text", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: تسجيل الدخول
      ///
      /// Locales: ar
      static func lj5NxIbgNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lj5-Nx-Ibg.normalTitle", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "Lj5-Nx-Ibg.normalTitle"
        }

        return NSLocalizedString("Lj5-Nx-Ibg.normalTitle", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: رسوم التوصيل
      ///
      /// Locales: ar
      static func wvRW3CaHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wvR-w3-CaH.text", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "wvR-w3-CaH.text"
        }

        return NSLocalizedString("wvR-w3-CaH.text", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الهاتف*
      ///
      /// Locales: ar
      static func cf5D4EngPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cf5-d4-eng.placeholder", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "Cf5-d4-eng.placeholder"
        }

        return NSLocalizedString("Cf5-d4-eng.placeholder", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: سلة المشتريات
      ///
      /// Locales: ar
      static func sR8QvPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("24s-r8-qvP.text", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "24s-r8-qvP.text"
        }

        return NSLocalizedString("24s-r8-qvP.text", tableName: "Cart", bundle: bundle, comment: "")
      }

      /// ar translation: منتج في السلة
      ///
      /// Locales: ar
      static func nsQ5TEIbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NsQ-5T-eIb.text", tableName: "Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Cart", preferredLanguages: preferredLanguages) else {
          return "NsQ-5T-eIb.text"
        }

        return NSLocalizedString("NsQ-5T-eIb.text", tableName: "Cart", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.checkout` struct is generated, and contains static references to 46 localization keys.
    struct checkout {
      /// ar translation:  المجموع الكلى
      ///
      /// Locales: ar
      static let h4MNmZubText = Rswift.StringResource(key: "H4M-nm-zub.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 0.000 د.ك
      ///
      /// Locales: ar
      static let kzkQhA34Text = Rswift.StringResource(key: "KZK-Qh-A34.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 0.000 د.ك
      ///
      /// Locales: ar
      static let nW6YeWj6Text = Rswift.StringResource(key: "nW6-Ye-Wj6.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Label
      ///
      /// Locales: ar
      static let dekJ4I6vText = Rswift.StringResource(key: "dek-j4-I6v.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أدخل هنا
      ///
      /// Locales: ar
      static let jYzQMXFUPlaceholder = Rswift.StringResource(key: "jYz-qM-XFU.placeholder", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أدخل هنا
      ///
      /// Locales: ar
      static let qoUVhAM8Placeholder = Rswift.StringResource(key: "qoU-Vh-AM8.placeholder", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أضف عنوان جديد
      ///
      /// Locales: ar
      static let hwZA3FpNText = Rswift.StringResource(key: "hwZ-A3-fpN.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أضف عنوان جديد
      ///
      /// Locales: ar
      static let jaTPLJ2CText = Rswift.StringResource(key: "JaT-PL-j2C.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إجمالى المنتجات
      ///
      /// Locales: ar
      static let h0nURTvbText = Rswift.StringResource(key: "h0n-uR-tvb.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إجمالى المنتجات
      ///
      /// Locales: ar
      static let qqDH8QdYText = Rswift.StringResource(key: "QqD-H8-qdY.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إختر التاريخ
      ///
      /// Locales: ar
      static let dQ8Vj5WXText = Rswift.StringResource(key: "dQ8-vj-5WX.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إختر الوقت
      ///
      /// Locales: ar
      static let vok5CWCrText = Rswift.StringResource(key: "vok-5C-wCr.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اختر عنوان
      ///
      /// Locales: ar
      static let eh5N4RhXPlaceholder = Rswift.StringResource(key: "Eh5-n4-RhX.placeholder", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اختر عنوان
      ///
      /// Locales: ar
      static let oqYKsZa7Text = Rswift.StringResource(key: "OqY-ks-Za7.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاستمرار للدفع
      ///
      /// Locales: ar
      static let zH3OSHQNormalTitle = Rswift.StringResource(key: "8zH-3O-SHQ.normalTitle", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الخصم
      ///
      /// Locales: ar
      static let qhsSo0oPText = Rswift.StringResource(key: "qhs-So-0oP.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الخصم
      ///
      /// Locales: ar
      static let tYdEYO6SText = Rswift.StringResource(key: "tYd-EY-o6S.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الدفع
      ///
      /// Locales: ar
      static let bkYYsAtaText = Rswift.StringResource(key: "BkY-Ys-ata.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الدفع
      ///
      /// Locales: ar
      static let dOxQvSq6Text = Rswift.StringResource(key: "DOx-Qv-Sq6.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الرئيسية
      ///
      /// Locales: ar
      static let vsl6319lNormalTitle = Rswift.StringResource(key: "VSL-63-19l.normalTitle", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: المجموع الكلى
      ///
      /// Locales: ar
      static let dclV9QugText = Rswift.StringResource(key: "dcl-v9-Qug.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تأكيد الطلب
      ///
      /// Locales: ar
      static let wy54W3n9NormalTitle = Rswift.StringResource(key: "Wy5-4W-3n9.normalTitle", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تطبيق
      ///
      /// Locales: ar
      static let j7zW8Ra6NormalTitle = Rswift.StringResource(key: "J7z-w8-ra6.normalTitle", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تطبيق
      ///
      /// Locales: ar
      static let qgaUoA2lNormalTitle = Rswift.StringResource(key: "QGA-uo-A2l.normalTitle", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تم الطلب بنجاح
      ///
      /// Locales: ar
      static let tJX0FjCText = Rswift.StringResource(key: "0tJ-x0-fjC.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تم تطبيق الخصم
      ///
      /// Locales: ar
      static let h4jUdALRText = Rswift.StringResource(key: "H4j-Ud-aLR.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: توصيل سريع
      ///
      /// Locales: ar
      static let it8BCDqcText = Rswift.StringResource(key: "IT8-BC-Dqc.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: حاول مرة أخرى
      ///
      /// Locales: ar
      static let ohsKp9w2NormalTitle = Rswift.StringResource(key: "ohs-kp-9w2.normalTitle", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: خطأ
      ///
      /// Locales: ar
      static let outLQ5kvText = Rswift.StringResource(key: "Out-LQ-5kv.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رسوم التوصيل
      ///
      /// Locales: ar
      static let ludPb6aSText = Rswift.StringResource(key: "lud-Pb-6aS.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رسوم التوصيل
      ///
      /// Locales: ar
      static let qgKSINMText = Rswift.StringResource(key: "6Qg-kS-INM.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الدفع
      ///
      /// Locales: ar
      static let gHkA1EMBText = Rswift.StringResource(key: "GHk-a1-eMB.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الطلب
      ///
      /// Locales: ar
      static let mFWDN6LaText = Rswift.StringResource(key: "mFW-DN-6La.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم المعاملة
      ///
      /// Locales: ar
      static let mb14lN0VText = Rswift.StringResource(key: "Mb1-4l-N0V.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: سيتم تسليم الصناديق في خلال يوم الي يومين
      ///
      /// Locales: ar
      static let b78BA2SHText = Rswift.StringResource(key: "b78-bA-2SH.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: طريقة التوصيل
      ///
      /// Locales: ar
      static let xaT0CGXyText = Rswift.StringResource(key: "xaT-0C-gXy.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: طريقة الدفع
      ///
      /// Locales: ar
      static let g88Ie1UOText = Rswift.StringResource(key: "g88-Ie-1UO.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: طريقة الدفع
      ///
      /// Locales: ar
      static let le3RyTejText = Rswift.StringResource(key: "le3-ry-tej.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عنوان التوصيل
      ///
      /// Locales: ar
      static let fuIDCKm5Text = Rswift.StringResource(key: "fuI-DC-km5.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عنوان التوصيل
      ///
      /// Locales: ar
      static let lmwCALWXText = Rswift.StringResource(key: "Lmw-CA-lWX.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: كود الخصم
      ///
      /// Locales: ar
      static let nirDpILqText = Rswift.StringResource(key: "Nir-dp-ILq.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: كود الخصم
      ///
      /// Locales: ar
      static let ufuN0WKQText = Rswift.StringResource(key: "Ufu-N0-wKQ.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: لا يوجد عنوان
      ///
      /// Locales: ar
      static let prK0qCPEText = Rswift.StringResource(key: "prK-0q-CPE.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: لحوم
      ///
      /// Locales: ar
      static let uxKOzHs9Text = Rswift.StringResource(key: "uxK-Oz-hs9.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: يرجى إضافة عنوان !
      ///
      /// Locales: ar
      static let jyAAfBguText = Rswift.StringResource(key: "JyA-Af-Bgu.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: يرجى المحاولة مرة أخري
      ///
      /// Locales: ar
      static let ynN1rTP6Text = Rswift.StringResource(key: "YnN-1r-TP6.text", tableName: "Checkout", bundle: R.hostingBundle, locales: ["ar"], comment: nil)

      /// ar translation:  المجموع الكلى
      ///
      /// Locales: ar
      static func h4MNmZubText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("H4M-nm-zub.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "H4M-nm-zub.text"
        }

        return NSLocalizedString("H4M-nm-zub.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: 0.000 د.ك
      ///
      /// Locales: ar
      static func kzkQhA34Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KZK-Qh-A34.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "KZK-Qh-A34.text"
        }

        return NSLocalizedString("KZK-Qh-A34.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: 0.000 د.ك
      ///
      /// Locales: ar
      static func nW6YeWj6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nW6-Ye-Wj6.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "nW6-Ye-Wj6.text"
        }

        return NSLocalizedString("nW6-Ye-Wj6.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: Label
      ///
      /// Locales: ar
      static func dekJ4I6vText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dek-j4-I6v.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "dek-j4-I6v.text"
        }

        return NSLocalizedString("dek-j4-I6v.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: أدخل هنا
      ///
      /// Locales: ar
      static func jYzQMXFUPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jYz-qM-XFU.placeholder", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "jYz-qM-XFU.placeholder"
        }

        return NSLocalizedString("jYz-qM-XFU.placeholder", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: أدخل هنا
      ///
      /// Locales: ar
      static func qoUVhAM8Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qoU-Vh-AM8.placeholder", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "qoU-Vh-AM8.placeholder"
        }

        return NSLocalizedString("qoU-Vh-AM8.placeholder", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: أضف عنوان جديد
      ///
      /// Locales: ar
      static func hwZA3FpNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hwZ-A3-fpN.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "hwZ-A3-fpN.text"
        }

        return NSLocalizedString("hwZ-A3-fpN.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: أضف عنوان جديد
      ///
      /// Locales: ar
      static func jaTPLJ2CText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JaT-PL-j2C.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "JaT-PL-j2C.text"
        }

        return NSLocalizedString("JaT-PL-j2C.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: إجمالى المنتجات
      ///
      /// Locales: ar
      static func h0nURTvbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("h0n-uR-tvb.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "h0n-uR-tvb.text"
        }

        return NSLocalizedString("h0n-uR-tvb.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: إجمالى المنتجات
      ///
      /// Locales: ar
      static func qqDH8QdYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QqD-H8-qdY.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "QqD-H8-qdY.text"
        }

        return NSLocalizedString("QqD-H8-qdY.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: إختر التاريخ
      ///
      /// Locales: ar
      static func dQ8Vj5WXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dQ8-vj-5WX.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "dQ8-vj-5WX.text"
        }

        return NSLocalizedString("dQ8-vj-5WX.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: إختر الوقت
      ///
      /// Locales: ar
      static func vok5CWCrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vok-5C-wCr.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "vok-5C-wCr.text"
        }

        return NSLocalizedString("vok-5C-wCr.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: اختر عنوان
      ///
      /// Locales: ar
      static func eh5N4RhXPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Eh5-n4-RhX.placeholder", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "Eh5-n4-RhX.placeholder"
        }

        return NSLocalizedString("Eh5-n4-RhX.placeholder", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: اختر عنوان
      ///
      /// Locales: ar
      static func oqYKsZa7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OqY-ks-Za7.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "OqY-ks-Za7.text"
        }

        return NSLocalizedString("OqY-ks-Za7.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: الاستمرار للدفع
      ///
      /// Locales: ar
      static func zH3OSHQNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8zH-3O-SHQ.normalTitle", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "8zH-3O-SHQ.normalTitle"
        }

        return NSLocalizedString("8zH-3O-SHQ.normalTitle", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: الخصم
      ///
      /// Locales: ar
      static func qhsSo0oPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qhs-So-0oP.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "qhs-So-0oP.text"
        }

        return NSLocalizedString("qhs-So-0oP.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: الخصم
      ///
      /// Locales: ar
      static func tYdEYO6SText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tYd-EY-o6S.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "tYd-EY-o6S.text"
        }

        return NSLocalizedString("tYd-EY-o6S.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: الدفع
      ///
      /// Locales: ar
      static func bkYYsAtaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BkY-Ys-ata.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "BkY-Ys-ata.text"
        }

        return NSLocalizedString("BkY-Ys-ata.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: الدفع
      ///
      /// Locales: ar
      static func dOxQvSq6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DOx-Qv-Sq6.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "DOx-Qv-Sq6.text"
        }

        return NSLocalizedString("DOx-Qv-Sq6.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: الرئيسية
      ///
      /// Locales: ar
      static func vsl6319lNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VSL-63-19l.normalTitle", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "VSL-63-19l.normalTitle"
        }

        return NSLocalizedString("VSL-63-19l.normalTitle", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: المجموع الكلى
      ///
      /// Locales: ar
      static func dclV9QugText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dcl-v9-Qug.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "dcl-v9-Qug.text"
        }

        return NSLocalizedString("dcl-v9-Qug.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: تأكيد الطلب
      ///
      /// Locales: ar
      static func wy54W3n9NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wy5-4W-3n9.normalTitle", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "Wy5-4W-3n9.normalTitle"
        }

        return NSLocalizedString("Wy5-4W-3n9.normalTitle", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: تطبيق
      ///
      /// Locales: ar
      static func j7zW8Ra6NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("J7z-w8-ra6.normalTitle", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "J7z-w8-ra6.normalTitle"
        }

        return NSLocalizedString("J7z-w8-ra6.normalTitle", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: تطبيق
      ///
      /// Locales: ar
      static func qgaUoA2lNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QGA-uo-A2l.normalTitle", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "QGA-uo-A2l.normalTitle"
        }

        return NSLocalizedString("QGA-uo-A2l.normalTitle", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: تم الطلب بنجاح
      ///
      /// Locales: ar
      static func tJX0FjCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0tJ-x0-fjC.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "0tJ-x0-fjC.text"
        }

        return NSLocalizedString("0tJ-x0-fjC.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: تم تطبيق الخصم
      ///
      /// Locales: ar
      static func h4jUdALRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("H4j-Ud-aLR.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "H4j-Ud-aLR.text"
        }

        return NSLocalizedString("H4j-Ud-aLR.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: توصيل سريع
      ///
      /// Locales: ar
      static func it8BCDqcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IT8-BC-Dqc.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "IT8-BC-Dqc.text"
        }

        return NSLocalizedString("IT8-BC-Dqc.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: حاول مرة أخرى
      ///
      /// Locales: ar
      static func ohsKp9w2NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ohs-kp-9w2.normalTitle", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "ohs-kp-9w2.normalTitle"
        }

        return NSLocalizedString("ohs-kp-9w2.normalTitle", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: خطأ
      ///
      /// Locales: ar
      static func outLQ5kvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Out-LQ-5kv.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "Out-LQ-5kv.text"
        }

        return NSLocalizedString("Out-LQ-5kv.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: رسوم التوصيل
      ///
      /// Locales: ar
      static func ludPb6aSText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lud-Pb-6aS.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "lud-Pb-6aS.text"
        }

        return NSLocalizedString("lud-Pb-6aS.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: رسوم التوصيل
      ///
      /// Locales: ar
      static func qgKSINMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6Qg-kS-INM.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "6Qg-kS-INM.text"
        }

        return NSLocalizedString("6Qg-kS-INM.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الدفع
      ///
      /// Locales: ar
      static func gHkA1EMBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GHk-a1-eMB.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "GHk-a1-eMB.text"
        }

        return NSLocalizedString("GHk-a1-eMB.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الطلب
      ///
      /// Locales: ar
      static func mFWDN6LaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mFW-DN-6La.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "mFW-DN-6La.text"
        }

        return NSLocalizedString("mFW-DN-6La.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: رقم المعاملة
      ///
      /// Locales: ar
      static func mb14lN0VText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mb1-4l-N0V.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "Mb1-4l-N0V.text"
        }

        return NSLocalizedString("Mb1-4l-N0V.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: سيتم تسليم الصناديق في خلال يوم الي يومين
      ///
      /// Locales: ar
      static func b78BA2SHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("b78-bA-2SH.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "b78-bA-2SH.text"
        }

        return NSLocalizedString("b78-bA-2SH.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: طريقة التوصيل
      ///
      /// Locales: ar
      static func xaT0CGXyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xaT-0C-gXy.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "xaT-0C-gXy.text"
        }

        return NSLocalizedString("xaT-0C-gXy.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: طريقة الدفع
      ///
      /// Locales: ar
      static func g88Ie1UOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("g88-Ie-1UO.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "g88-Ie-1UO.text"
        }

        return NSLocalizedString("g88-Ie-1UO.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: طريقة الدفع
      ///
      /// Locales: ar
      static func le3RyTejText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("le3-ry-tej.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "le3-ry-tej.text"
        }

        return NSLocalizedString("le3-ry-tej.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: عنوان التوصيل
      ///
      /// Locales: ar
      static func fuIDCKm5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fuI-DC-km5.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "fuI-DC-km5.text"
        }

        return NSLocalizedString("fuI-DC-km5.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: عنوان التوصيل
      ///
      /// Locales: ar
      static func lmwCALWXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lmw-CA-lWX.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "Lmw-CA-lWX.text"
        }

        return NSLocalizedString("Lmw-CA-lWX.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: كود الخصم
      ///
      /// Locales: ar
      static func nirDpILqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nir-dp-ILq.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "Nir-dp-ILq.text"
        }

        return NSLocalizedString("Nir-dp-ILq.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: كود الخصم
      ///
      /// Locales: ar
      static func ufuN0WKQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ufu-N0-wKQ.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "Ufu-N0-wKQ.text"
        }

        return NSLocalizedString("Ufu-N0-wKQ.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: لا يوجد عنوان
      ///
      /// Locales: ar
      static func prK0qCPEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("prK-0q-CPE.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "prK-0q-CPE.text"
        }

        return NSLocalizedString("prK-0q-CPE.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: لحوم
      ///
      /// Locales: ar
      static func uxKOzHs9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uxK-Oz-hs9.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "uxK-Oz-hs9.text"
        }

        return NSLocalizedString("uxK-Oz-hs9.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: يرجى إضافة عنوان !
      ///
      /// Locales: ar
      static func jyAAfBguText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JyA-Af-Bgu.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "JyA-Af-Bgu.text"
        }

        return NSLocalizedString("JyA-Af-Bgu.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      /// ar translation: يرجى المحاولة مرة أخري
      ///
      /// Locales: ar
      static func ynN1rTP6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YnN-1r-TP6.text", tableName: "Checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Checkout", preferredLanguages: preferredLanguages) else {
          return "YnN-1r-TP6.text"
        }

        return NSLocalizedString("YnN-1r-TP6.text", tableName: "Checkout", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.intro` struct is generated, and contains static references to 4 localization keys.
    struct intro {
      /// ar translation: Arabic
      ///
      /// Locales: ar
      static let qOTyIhjNormalTitle = Rswift.StringResource(key: "7qO-Ty-Ihj.normalTitle", tableName: "Intro", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: English
      ///
      /// Locales: ar
      static let aKeVlPSaNormalTitle = Rswift.StringResource(key: "AKe-Vl-PSa.normalTitle", tableName: "Intro", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اختر اللغة
      ///
      /// Locales: ar
      static let j9UWpIFNText = Rswift.StringResource(key: "J9U-Wp-iFN.text", tableName: "Intro", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تخطى
      ///
      /// Locales: ar
      static let gZwMfAryNormalTitle = Rswift.StringResource(key: "gZw-Mf-ary.normalTitle", tableName: "Intro", bundle: R.hostingBundle, locales: ["ar"], comment: nil)

      /// ar translation: Arabic
      ///
      /// Locales: ar
      static func qOTyIhjNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7qO-Ty-Ihj.normalTitle", tableName: "Intro", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Intro", preferredLanguages: preferredLanguages) else {
          return "7qO-Ty-Ihj.normalTitle"
        }

        return NSLocalizedString("7qO-Ty-Ihj.normalTitle", tableName: "Intro", bundle: bundle, comment: "")
      }

      /// ar translation: English
      ///
      /// Locales: ar
      static func aKeVlPSaNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AKe-Vl-PSa.normalTitle", tableName: "Intro", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Intro", preferredLanguages: preferredLanguages) else {
          return "AKe-Vl-PSa.normalTitle"
        }

        return NSLocalizedString("AKe-Vl-PSa.normalTitle", tableName: "Intro", bundle: bundle, comment: "")
      }

      /// ar translation: اختر اللغة
      ///
      /// Locales: ar
      static func j9UWpIFNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("J9U-Wp-iFN.text", tableName: "Intro", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Intro", preferredLanguages: preferredLanguages) else {
          return "J9U-Wp-iFN.text"
        }

        return NSLocalizedString("J9U-Wp-iFN.text", tableName: "Intro", bundle: bundle, comment: "")
      }

      /// ar translation: تخطى
      ///
      /// Locales: ar
      static func gZwMfAryNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gZw-Mf-ary.normalTitle", tableName: "Intro", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Intro", preferredLanguages: preferredLanguages) else {
          return "gZw-Mf-ary.normalTitle"
        }

        return NSLocalizedString("gZw-Mf-ary.normalTitle", tableName: "Intro", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 129 localization keys.
    struct localizable {
      /// en translation: 811030819013-usfu18cqeunk0k1j5t53akc99cafk82f.apps.googleusercontent.com
      ///
      /// Locales: en, ar
      static let googleApiKey = Rswift.StringResource(key: "googleApiKey", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Add Box
      ///
      /// Locales: en, ar
      static let addBox = Rswift.StringResource(key: "Add Box", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Add to My Box
      ///
      /// Locales: en, ar
      static let addToMyBox = Rswift.StringResource(key: "Add to My Box", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Are you sure want to remove Box
      ///
      /// Locales: en, ar
      static let areYouSureWantToRemoveBox = Rswift.StringResource(key: "Are you sure want to remove Box", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Are you sure want to remove Item from Wishlist
      ///
      /// Locales: en, ar
      static let whishlistRemoveItemMessage = Rswift.StringResource(key: "whishlist remove item message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Are you sure you want to logout
      ///
      /// Locales: en, ar
      static let areYouSureYouWantToLogout = Rswift.StringResource(key: "Are you sure you want to logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Are you sure you want to remove address from address book.
      ///
      /// Locales: en, ar
      static let addressRemovalMessage = Rswift.StringResource(key: "addressRemovalMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Available
      ///
      /// Locales: en, ar
      static let available = Rswift.StringResource(key: "Available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: BLOCK
      ///
      /// Locales: en, ar
      static let blocK = Rswift.StringResource(key: "BLOCK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: BUILDING
      ///
      /// Locales: en, ar
      static let buildinG = Rswift.StringResource(key: "BUILDING", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Cart
      ///
      /// Locales: en, ar
      static let cart = Rswift.StringResource(key: "Cart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Cash on Delivery
      ///
      /// Locales: en, ar
      static let cashOnDelivery = Rswift.StringResource(key: "Cash on Delivery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: en, ar
      static let changePassword = Rswift.StringResource(key: "Change Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Clear
      ///
      /// Locales: en, ar
      static let clear = Rswift.StringResource(key: "Clear", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Confirmation
      ///
      /// Locales: en, ar
      static let confirmation = Rswift.StringResource(key: "Confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Confirmed password not match password
      ///
      /// Locales: en, ar
      static let passMatching = Rswift.StringResource(key: "passMatching", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Delete Box
      ///
      /// Locales: en, ar
      static let deleteBox = Rswift.StringResource(key: "Delete Box", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Delete address
      ///
      /// Locales: en, ar
      static let deleteAddress = Rswift.StringResource(key: "Delete address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Edit Profile
      ///
      /// Locales: en, ar
      static let editProfile = Rswift.StringResource(key: "Edit Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en, ar
      static let error = Rswift.StringResource(key: "Error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Express
      ///
      /// Locales: en, ar
      static let express = Rswift.StringResource(key: "Express", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: FLOOR
      ///
      /// Locales: en, ar
      static let flooR = Rswift.StringResource(key: "FLOOR", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Fish
      ///
      /// Locales: en, ar
      static let fish = Rswift.StringResource(key: "Fish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, ar
      static let home = Rswift.StringResource(key: "home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Invalid Code!
      ///
      /// Locales: en, ar
      static let invalidCode = Rswift.StringResource(key: "Invalid Code!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Items
      ///
      /// Locales: en, ar
      static let items = Rswift.StringResource(key: "Items", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Items
      ///
      /// Locales: en, ar
      static let theItems = Rswift.StringResource(key: "theItems", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Items : 
      ///
      /// Locales: en, ar
      static let itemsCountLabel = Rswift.StringResource(key: "itemsCountLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Items not available
      ///
      /// Locales: en, ar
      static let itemsNotAvailable = Rswift.StringResource(key: "Items not available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: KWD
      ///
      /// Locales: en, ar
      static let kwD = Rswift.StringResource(key: "KWD", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: KWD
      ///
      /// Locales: en, ar
      static let kwd = Rswift.StringResource(key: "kwd", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en, ar
      static let login = Rswift.StringResource(key: "Login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: en, ar
      static let logout = Rswift.StringResource(key: "Logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: May be 1 or 2 Items are not Available right now, Rest of your items has been added Your cart.
      ///
      /// Locales: en, ar
      static let mayBe1Or2ItemsAreNotAvailableRightNowRestOfYourItemsHasBeenAddedYourCart = Rswift.StringResource(key: "May be 1 or 2 Items are not Available right now, Rest of your items has been added Your cart.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Meat
      ///
      /// Locales: en, ar
      static let meat = Rswift.StringResource(key: "Meat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Message*
      ///
      /// Locales: en, ar
      static let message = Rswift.StringResource(key: "Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: My Address
      ///
      /// Locales: en, ar
      static let myAddress = Rswift.StringResource(key: "My Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: My Boxes
      ///
      /// Locales: en, ar
      static let myBoxes = Rswift.StringResource(key: "My Boxes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: My Orders
      ///
      /// Locales: en, ar
      static let myOrders = Rswift.StringResource(key: "My Orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: My Wallet
      ///
      /// Locales: en, ar
      static let myWallet = Rswift.StringResource(key: "My Wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: N/A
      ///
      /// Locales: en, ar
      static let nA = Rswift.StringResource(key: "N/A", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Newest
      ///
      /// Locales: en, ar
      static let newest = Rswift.StringResource(key: "Newest", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: No Result Found!
      ///
      /// Locales: en, ar
      static let noResultFound = Rswift.StringResource(key: "No Result Found!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: No offers found
      ///
      /// Locales: en, ar
      static let noOffersFound = Rswift.StringResource(key: "No offers found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Normal
      ///
      /// Locales: en, ar
      static let normal = Rswift.StringResource(key: "Normal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Offers
      ///
      /// Locales: en, ar
      static let theShops = Rswift.StringResource(key: "TheShops", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Ok
      ///
      /// Locales: en, ar
      static let ok = Rswift.StringResource(key: "Ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Online
      ///
      /// Locales: en, ar
      static let online = Rswift.StringResource(key: "Online", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Other Instructions
      ///
      /// Locales: en, ar
      static let otherInstructions = Rswift.StringResource(key: "Other Instructions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Out of stock
      ///
      /// Locales: en, ar
      static let outOfStock = Rswift.StringResource(key: "Out of stock", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Password  must be at least  8 characters
      ///
      /// Locales: en, ar
      static let passLengthValidation = Rswift.StringResource(key: "passLengthValidation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Password Changed
      ///
      /// Locales: en, ar
      static let passwordChanged = Rswift.StringResource(key: "Password Changed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Password sent
      ///
      /// Locales: en, ar
      static let passwordSent = Rswift.StringResource(key: "Password sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Persons
      ///
      /// Locales: en, ar
      static let persons = Rswift.StringResource(key: "Persons", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please accept privacy policy and T&C
      ///
      /// Locales: en, ar
      static let termsAcceptValidation = Rswift.StringResource(key: "termsAcceptValidation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please add a Box for  adding the product in box.
      ///
      /// Locales: en, ar
      static let pleaseAddABoxForAddingTheProductInBox = Rswift.StringResource(key: "Please add a Box for adding the product in box.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please add an address
      ///
      /// Locales: en, ar
      static let pleaseAddAnAddress = Rswift.StringResource(key: "Please add an address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter a valid email
      ///
      /// Locales: en, ar
      static let pleaseEnterAValidEmail = Rswift.StringResource(key: "Please enter a valid email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter a valid phone number (8 digits only)
      ///
      /// Locales: en, ar
      static let phoneLengthValidation = Rswift.StringResource(key: "phoneLengthValidation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter a valid phone number (8 digits only)
      ///
      /// Locales: en, ar
      static let pleaseEnterAValidPhoneNumber8DigitsOnly = Rswift.StringResource(key: "Please enter a valid phone number (8 digits only)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter address name
      ///
      /// Locales: en, ar
      static let pleaseEnterAddressName = Rswift.StringResource(key: "Please enter address name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter block
      ///
      /// Locales: en, ar
      static let pleaseEnterBlock = Rswift.StringResource(key: "Please enter block", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter box name
      ///
      /// Locales: en, ar
      static let pleaseEnterBoxName = Rswift.StringResource(key: "Please enter box name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter confirmed password
      ///
      /// Locales: en, ar
      static let pleaseEnterConfirmedPassword = Rswift.StringResource(key: "Please enter confirmed password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter coupon code
      ///
      /// Locales: en, ar
      static let pleaseEnterCouponCode = Rswift.StringResource(key: "Please enter coupon code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter customer name
      ///
      /// Locales: en, ar
      static let pleaseEnterCustomerName = Rswift.StringResource(key: "Please enter customer name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter flat no
      ///
      /// Locales: en, ar
      static let pleaseEnterFlatNo = Rswift.StringResource(key: "Please enter flat no", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter floor no
      ///
      /// Locales: en, ar
      static let pleaseEnterFloorNo = Rswift.StringResource(key: "Please enter floor no", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter house no
      ///
      /// Locales: en, ar
      static let pleaseEnterHouseNo = Rswift.StringResource(key: "Please enter house no", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter new confirmed password
      ///
      /// Locales: en, ar
      static let pleaseEnterNewConfirmedPassword = Rswift.StringResource(key: "Please enter new confirmed password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter new password (must be at least 8 characters)
      ///
      /// Locales: en, ar
      static let pleaseEnterNewPassword = Rswift.StringResource(key: "Please enter new password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter old password (must be at least 8 characters)
      ///
      /// Locales: en, ar
      static let pleaseEnterOldPassword = Rswift.StringResource(key: "Please enter old password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter street  no
      ///
      /// Locales: en, ar
      static let pleaseEnterStreetNo = Rswift.StringResource(key: "Please enter street  no", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter the charge value
      ///
      /// Locales: en, ar
      static let pleaseEnterTheChargeValue = Rswift.StringResource(key: "Please enter the charge value", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter your address
      ///
      /// Locales: en, ar
      static let pleaseEnterYourAddress = Rswift.StringResource(key: "Please enter your address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter your email
      ///
      /// Locales: en, ar
      static let pleaseEnterYourEmail = Rswift.StringResource(key: "Please enter your email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter your first name
      ///
      /// Locales: en, ar
      static let pleaseEnterYourFirstName = Rswift.StringResource(key: "Please enter your first name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter your last name
      ///
      /// Locales: en, ar
      static let pleaseEnterYourLastName = Rswift.StringResource(key: "Please enter your last name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter your message
      ///
      /// Locales: en, ar
      static let pleaseEnterYourMessage = Rswift.StringResource(key: "Please enter your message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter your name
      ///
      /// Locales: en, ar
      static let pleaseEnterYourName = Rswift.StringResource(key: "Please enter your name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter your password
      ///
      /// Locales: en, ar
      static let pleaseEnterYourPassword = Rswift.StringResource(key: "Please enter your password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter your phone
      ///
      /// Locales: en, ar
      static let pleaseEnterYourPhone = Rswift.StringResource(key: "Please enter your phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please login first
      ///
      /// Locales: en, ar
      static let pleaseLoginFirst = Rswift.StringResource(key: "Please login first", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please select area
      ///
      /// Locales: en, ar
      static let pleaseSelectArea = Rswift.StringResource(key: "Please select area", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please select delivery type
      ///
      /// Locales: en, ar
      static let pleaseSelectDeliveryType = Rswift.StringResource(key: "Please select delivery type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please select order date
      ///
      /// Locales: en, ar
      static let pleaseSelectOrderDate = Rswift.StringResource(key: "Please select order date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please select order time
      ///
      /// Locales: en, ar
      static let pleaseSelectOrderTime = Rswift.StringResource(key: "Please select order time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please select payment method
      ///
      /// Locales: en, ar
      static let pleaseSelectPaymentMethod = Rswift.StringResource(key: "Please select payment method", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please select your address
      ///
      /// Locales: en, ar
      static let pleaseSelectYourAddress = Rswift.StringResource(key: "Please select your address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Poultry
      ///
      /// Locales: en, ar
      static let poultry = Rswift.StringResource(key: "Poultry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Price (High to Low)
      ///
      /// Locales: en, ar
      static let priceHighToLow = Rswift.StringResource(key: "Price (High to Low)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Price (Low to High)
      ///
      /// Locales: en, ar
      static let priceLowToHigh = Rswift.StringResource(key: "Price (Low to High)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: en, ar
      static let profile = Rswift.StringResource(key: "Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Profile Updated
      ///
      /// Locales: en, ar
      static let profileUpdated = Rswift.StringResource(key: "Profile Updated", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Promo code Applied!
      ///
      /// Locales: en, ar
      static let promoCodeApplied = Rswift.StringResource(key: "Promo code Applied!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Quantity : 
      ///
      /// Locales: en, ar
      static let quantityLabel = Rswift.StringResource(key: "quantityLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Remove item
      ///
      /// Locales: en, ar
      static let removeItem = Rswift.StringResource(key: "Remove item", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Request Sent
      ///
      /// Locales: en, ar
      static let requestSent = Rswift.StringResource(key: "Request Sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: STREET
      ///
      /// Locales: en, ar
      static let streeT = Rswift.StringResource(key: "STREET", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Saved Addresses
      ///
      /// Locales: en, ar
      static let savedAddresses = Rswift.StringResource(key: "Saved Addresses", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: See More
      ///
      /// Locales: en, ar
      static let seeMore = Rswift.StringResource(key: "See More", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, ar
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Shop
      ///
      /// Locales: en, ar
      static let shop = Rswift.StringResource(key: "shop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Shops
      ///
      /// Locales: en, ar
      static let shops = Rswift.StringResource(key: "Shops", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Something wen wrong!
      ///
      /// Locales: en, ar
      static let somethingWenWrong = Rswift.StringResource(key: "Something wen wrong!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Thanks
      ///
      /// Locales: en, ar
      static let thanks = Rswift.StringResource(key: "Thanks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Thanks for your message,  We will contact you soon.
      ///
      /// Locales: en, ar
      static let thanksForYourMessageWeWillContactYouSoon = Rswift.StringResource(key: "Thanks for your message, We will contact you soon.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: The coupon has been already used
      ///
      /// Locales: en, ar
      static let coponIsAlreadyUsed = Rswift.StringResource(key: "CoponIsAlreadyUsed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: There Is no Saved boxes yet,  Please add a box & add items
      ///
      /// Locales: en, ar
      static let boxesEmptyMessage = Rswift.StringResource(key: "boxesEmptyMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: There are no notifications
      ///
      /// Locales: en, ar
      static let thereAreNoNotifications = Rswift.StringResource(key: "There are no notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: There are no orders
      ///
      /// Locales: en, ar
      static let noOrders = Rswift.StringResource(key: "noOrders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: There are no products
      ///
      /// Locales: en, ar
      static let thereAreNoProducts = Rswift.StringResource(key: "There are no products", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: There are no shops
      ///
      /// Locales: en, ar
      static let thereAreNoShops = Rswift.StringResource(key: "There are no shops", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: There is no items in box.  Add Items
      ///
      /// Locales: en, ar
      static let thereIsNoItemsInBoxAddItems = Rswift.StringResource(key: "There is no items in box. Add Items", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: This item is unavailable now
      ///
      /// Locales: en, ar
      static let thisItemIsUnavailableNow = Rswift.StringResource(key: "This item is unavailable now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Try Again
      ///
      /// Locales: en, ar
      static let tryAgain = Rswift.StringResource(key: "Try Again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Unavailable !
      ///
      /// Locales: en, ar
      static let unavailable = Rswift.StringResource(key: "Unavailable !", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Update
      ///
      /// Locales: en, ar
      static let update = Rswift.StringResource(key: "Update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Wallet
      ///
      /// Locales: en, ar
      static let wallet = Rswift.StringResource(key: "Wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Wishlist
      ///
      /// Locales: en, ar
      static let wishlist = Rswift.StringResource(key: "Wishlist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en, ar
      static let yes = Rswift.StringResource(key: "Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: You have to login first to perform this action !
      ///
      /// Locales: en, ar
      static let profileGuestMessage = Rswift.StringResource(key: "profileGuestMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Your cart is empty
      ///
      /// Locales: en, ar
      static let yourCartIsEmpty = Rswift.StringResource(key: "Your cart is empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: not available, you need to update your cart to continue
      ///
      /// Locales: en, ar
      static let notAvailableYouNeedToUpdateCart = Rswift.StringResource(key: "not available, you need to update cart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: shop available
      ///
      /// Locales: en, ar
      static let shopAvailable = Rswift.StringResource(key: "shop available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: to
      ///
      /// Locales: en, ar
      static let to = Rswift.StringResource(key: "to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: wrong email address/password
      ///
      /// Locales: en, ar
      static let wrongEmailAddressPassword = Rswift.StringResource(key: "wrong email address/password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: you have reach to maximum quantity of this product
      ///
      /// Locales: en, ar
      static let maxPrdctCount = Rswift.StringResource(key: "max prdct count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: you have reach to maximum quantity of this product
      ///
      /// Locales: en, ar
      static let youHaveReachToMaximumQuantityOfThisProduct = Rswift.StringResource(key: "you have reach to maximum quantity of this product", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)

      /// en translation: 811030819013-usfu18cqeunk0k1j5t53akc99cafk82f.apps.googleusercontent.com
      ///
      /// Locales: en, ar
      static func googleApiKey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("googleApiKey", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "googleApiKey"
        }

        return NSLocalizedString("googleApiKey", bundle: bundle, comment: "")
      }

      /// en translation: Add Box
      ///
      /// Locales: en, ar
      static func addBox(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Box", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Box"
        }

        return NSLocalizedString("Add Box", bundle: bundle, comment: "")
      }

      /// en translation: Add to My Box
      ///
      /// Locales: en, ar
      static func addToMyBox(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add to My Box", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add to My Box"
        }

        return NSLocalizedString("Add to My Box", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure want to remove Box
      ///
      /// Locales: en, ar
      static func areYouSureWantToRemoveBox(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure want to remove Box", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure want to remove Box"
        }

        return NSLocalizedString("Are you sure want to remove Box", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure want to remove Item from Wishlist
      ///
      /// Locales: en, ar
      static func whishlistRemoveItemMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("whishlist remove item message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "whishlist remove item message"
        }

        return NSLocalizedString("whishlist remove item message", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to logout
      ///
      /// Locales: en, ar
      static func areYouSureYouWantToLogout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure you want to logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure you want to logout"
        }

        return NSLocalizedString("Are you sure you want to logout", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to remove address from address book.
      ///
      /// Locales: en, ar
      static func addressRemovalMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addressRemovalMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addressRemovalMessage"
        }

        return NSLocalizedString("addressRemovalMessage", bundle: bundle, comment: "")
      }

      /// en translation: Available
      ///
      /// Locales: en, ar
      static func available(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Available"
        }

        return NSLocalizedString("Available", bundle: bundle, comment: "")
      }

      /// en translation: BLOCK
      ///
      /// Locales: en, ar
      static func blocK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BLOCK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "BLOCK"
        }

        return NSLocalizedString("BLOCK", bundle: bundle, comment: "")
      }

      /// en translation: BUILDING
      ///
      /// Locales: en, ar
      static func buildinG(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BUILDING", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "BUILDING"
        }

        return NSLocalizedString("BUILDING", bundle: bundle, comment: "")
      }

      /// en translation: Cart
      ///
      /// Locales: en, ar
      static func cart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cart"
        }

        return NSLocalizedString("Cart", bundle: bundle, comment: "")
      }

      /// en translation: Cash on Delivery
      ///
      /// Locales: en, ar
      static func cashOnDelivery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cash on Delivery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cash on Delivery"
        }

        return NSLocalizedString("Cash on Delivery", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: en, ar
      static func changePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change Password"
        }

        return NSLocalizedString("Change Password", bundle: bundle, comment: "")
      }

      /// en translation: Clear
      ///
      /// Locales: en, ar
      static func clear(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Clear", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Clear"
        }

        return NSLocalizedString("Clear", bundle: bundle, comment: "")
      }

      /// en translation: Confirmation
      ///
      /// Locales: en, ar
      static func confirmation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirmation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirmation"
        }

        return NSLocalizedString("Confirmation", bundle: bundle, comment: "")
      }

      /// en translation: Confirmed password not match password
      ///
      /// Locales: en, ar
      static func passMatching(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passMatching", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "passMatching"
        }

        return NSLocalizedString("passMatching", bundle: bundle, comment: "")
      }

      /// en translation: Delete Box
      ///
      /// Locales: en, ar
      static func deleteBox(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete Box", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete Box"
        }

        return NSLocalizedString("Delete Box", bundle: bundle, comment: "")
      }

      /// en translation: Delete address
      ///
      /// Locales: en, ar
      static func deleteAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete address"
        }

        return NSLocalizedString("Delete address", bundle: bundle, comment: "")
      }

      /// en translation: Edit Profile
      ///
      /// Locales: en, ar
      static func editProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit Profile"
        }

        return NSLocalizedString("Edit Profile", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en, ar
      static func error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error"
        }

        return NSLocalizedString("Error", bundle: bundle, comment: "")
      }

      /// en translation: Express
      ///
      /// Locales: en, ar
      static func express(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Express", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Express"
        }

        return NSLocalizedString("Express", bundle: bundle, comment: "")
      }

      /// en translation: FLOOR
      ///
      /// Locales: en, ar
      static func flooR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FLOOR", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "FLOOR"
        }

        return NSLocalizedString("FLOOR", bundle: bundle, comment: "")
      }

      /// en translation: Fish
      ///
      /// Locales: en, ar
      static func fish(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fish", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Fish"
        }

        return NSLocalizedString("Fish", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, ar
      static func home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home"
        }

        return NSLocalizedString("home", bundle: bundle, comment: "")
      }

      /// en translation: Invalid Code!
      ///
      /// Locales: en, ar
      static func invalidCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Invalid Code!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Invalid Code!"
        }

        return NSLocalizedString("Invalid Code!", bundle: bundle, comment: "")
      }

      /// en translation: Items
      ///
      /// Locales: en, ar
      static func items(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Items", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Items"
        }

        return NSLocalizedString("Items", bundle: bundle, comment: "")
      }

      /// en translation: Items
      ///
      /// Locales: en, ar
      static func theItems(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("theItems", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "theItems"
        }

        return NSLocalizedString("theItems", bundle: bundle, comment: "")
      }

      /// en translation: Items : 
      ///
      /// Locales: en, ar
      static func itemsCountLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("itemsCountLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "itemsCountLabel"
        }

        return NSLocalizedString("itemsCountLabel", bundle: bundle, comment: "")
      }

      /// en translation: Items not available
      ///
      /// Locales: en, ar
      static func itemsNotAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Items not available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Items not available"
        }

        return NSLocalizedString("Items not available", bundle: bundle, comment: "")
      }

      /// en translation: KWD
      ///
      /// Locales: en, ar
      static func kwD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KWD", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "KWD"
        }

        return NSLocalizedString("KWD", bundle: bundle, comment: "")
      }

      /// en translation: KWD
      ///
      /// Locales: en, ar
      static func kwd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kwd", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "kwd"
        }

        return NSLocalizedString("kwd", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en, ar
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login"
        }

        return NSLocalizedString("Login", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: en, ar
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Logout"
        }

        return NSLocalizedString("Logout", bundle: bundle, comment: "")
      }

      /// en translation: May be 1 or 2 Items are not Available right now, Rest of your items has been added Your cart.
      ///
      /// Locales: en, ar
      static func mayBe1Or2ItemsAreNotAvailableRightNowRestOfYourItemsHasBeenAddedYourCart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("May be 1 or 2 Items are not Available right now, Rest of your items has been added Your cart.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "May be 1 or 2 Items are not Available right now, Rest of your items has been added Your cart."
        }

        return NSLocalizedString("May be 1 or 2 Items are not Available right now, Rest of your items has been added Your cart.", bundle: bundle, comment: "")
      }

      /// en translation: Meat
      ///
      /// Locales: en, ar
      static func meat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Meat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Meat"
        }

        return NSLocalizedString("Meat", bundle: bundle, comment: "")
      }

      /// en translation: Message*
      ///
      /// Locales: en, ar
      static func message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Message"
        }

        return NSLocalizedString("Message", bundle: bundle, comment: "")
      }

      /// en translation: My Address
      ///
      /// Locales: en, ar
      static func myAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Address"
        }

        return NSLocalizedString("My Address", bundle: bundle, comment: "")
      }

      /// en translation: My Boxes
      ///
      /// Locales: en, ar
      static func myBoxes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Boxes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Boxes"
        }

        return NSLocalizedString("My Boxes", bundle: bundle, comment: "")
      }

      /// en translation: My Orders
      ///
      /// Locales: en, ar
      static func myOrders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Orders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Orders"
        }

        return NSLocalizedString("My Orders", bundle: bundle, comment: "")
      }

      /// en translation: My Wallet
      ///
      /// Locales: en, ar
      static func myWallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Wallet"
        }

        return NSLocalizedString("My Wallet", bundle: bundle, comment: "")
      }

      /// en translation: N/A
      ///
      /// Locales: en, ar
      static func nA(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("N/A", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "N/A"
        }

        return NSLocalizedString("N/A", bundle: bundle, comment: "")
      }

      /// en translation: Newest
      ///
      /// Locales: en, ar
      static func newest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Newest", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Newest"
        }

        return NSLocalizedString("Newest", bundle: bundle, comment: "")
      }

      /// en translation: No Result Found!
      ///
      /// Locales: en, ar
      static func noResultFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Result Found!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Result Found!"
        }

        return NSLocalizedString("No Result Found!", bundle: bundle, comment: "")
      }

      /// en translation: No offers found
      ///
      /// Locales: en, ar
      static func noOffersFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No offers found", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No offers found"
        }

        return NSLocalizedString("No offers found", bundle: bundle, comment: "")
      }

      /// en translation: Normal
      ///
      /// Locales: en, ar
      static func normal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Normal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Normal"
        }

        return NSLocalizedString("Normal", bundle: bundle, comment: "")
      }

      /// en translation: Offers
      ///
      /// Locales: en, ar
      static func theShops(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TheShops", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TheShops"
        }

        return NSLocalizedString("TheShops", bundle: bundle, comment: "")
      }

      /// en translation: Ok
      ///
      /// Locales: en, ar
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ok"
        }

        return NSLocalizedString("Ok", bundle: bundle, comment: "")
      }

      /// en translation: Online
      ///
      /// Locales: en, ar
      static func online(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Online", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Online"
        }

        return NSLocalizedString("Online", bundle: bundle, comment: "")
      }

      /// en translation: Other Instructions
      ///
      /// Locales: en, ar
      static func otherInstructions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Other Instructions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Other Instructions"
        }

        return NSLocalizedString("Other Instructions", bundle: bundle, comment: "")
      }

      /// en translation: Out of stock
      ///
      /// Locales: en, ar
      static func outOfStock(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Out of stock", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Out of stock"
        }

        return NSLocalizedString("Out of stock", bundle: bundle, comment: "")
      }

      /// en translation: Password  must be at least  8 characters
      ///
      /// Locales: en, ar
      static func passLengthValidation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passLengthValidation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "passLengthValidation"
        }

        return NSLocalizedString("passLengthValidation", bundle: bundle, comment: "")
      }

      /// en translation: Password Changed
      ///
      /// Locales: en, ar
      static func passwordChanged(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password Changed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password Changed"
        }

        return NSLocalizedString("Password Changed", bundle: bundle, comment: "")
      }

      /// en translation: Password sent
      ///
      /// Locales: en, ar
      static func passwordSent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password sent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password sent"
        }

        return NSLocalizedString("Password sent", bundle: bundle, comment: "")
      }

      /// en translation: Persons
      ///
      /// Locales: en, ar
      static func persons(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Persons", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Persons"
        }

        return NSLocalizedString("Persons", bundle: bundle, comment: "")
      }

      /// en translation: Please accept privacy policy and T&C
      ///
      /// Locales: en, ar
      static func termsAcceptValidation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("termsAcceptValidation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "termsAcceptValidation"
        }

        return NSLocalizedString("termsAcceptValidation", bundle: bundle, comment: "")
      }

      /// en translation: Please add a Box for  adding the product in box.
      ///
      /// Locales: en, ar
      static func pleaseAddABoxForAddingTheProductInBox(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please add a Box for adding the product in box.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please add a Box for adding the product in box."
        }

        return NSLocalizedString("Please add a Box for adding the product in box.", bundle: bundle, comment: "")
      }

      /// en translation: Please add an address
      ///
      /// Locales: en, ar
      static func pleaseAddAnAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please add an address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please add an address"
        }

        return NSLocalizedString("Please add an address", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a valid email
      ///
      /// Locales: en, ar
      static func pleaseEnterAValidEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter a valid email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter a valid email"
        }

        return NSLocalizedString("Please enter a valid email", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a valid phone number (8 digits only)
      ///
      /// Locales: en, ar
      static func phoneLengthValidation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phoneLengthValidation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phoneLengthValidation"
        }

        return NSLocalizedString("phoneLengthValidation", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a valid phone number (8 digits only)
      ///
      /// Locales: en, ar
      static func pleaseEnterAValidPhoneNumber8DigitsOnly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter a valid phone number (8 digits only)", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter a valid phone number (8 digits only)"
        }

        return NSLocalizedString("Please enter a valid phone number (8 digits only)", bundle: bundle, comment: "")
      }

      /// en translation: Please enter address name
      ///
      /// Locales: en, ar
      static func pleaseEnterAddressName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter address name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter address name"
        }

        return NSLocalizedString("Please enter address name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter block
      ///
      /// Locales: en, ar
      static func pleaseEnterBlock(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter block", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter block"
        }

        return NSLocalizedString("Please enter block", bundle: bundle, comment: "")
      }

      /// en translation: Please enter box name
      ///
      /// Locales: en, ar
      static func pleaseEnterBoxName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter box name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter box name"
        }

        return NSLocalizedString("Please enter box name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter confirmed password
      ///
      /// Locales: en, ar
      static func pleaseEnterConfirmedPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter confirmed password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter confirmed password"
        }

        return NSLocalizedString("Please enter confirmed password", bundle: bundle, comment: "")
      }

      /// en translation: Please enter coupon code
      ///
      /// Locales: en, ar
      static func pleaseEnterCouponCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter coupon code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter coupon code"
        }

        return NSLocalizedString("Please enter coupon code", bundle: bundle, comment: "")
      }

      /// en translation: Please enter customer name
      ///
      /// Locales: en, ar
      static func pleaseEnterCustomerName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter customer name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter customer name"
        }

        return NSLocalizedString("Please enter customer name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter flat no
      ///
      /// Locales: en, ar
      static func pleaseEnterFlatNo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter flat no", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter flat no"
        }

        return NSLocalizedString("Please enter flat no", bundle: bundle, comment: "")
      }

      /// en translation: Please enter floor no
      ///
      /// Locales: en, ar
      static func pleaseEnterFloorNo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter floor no", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter floor no"
        }

        return NSLocalizedString("Please enter floor no", bundle: bundle, comment: "")
      }

      /// en translation: Please enter house no
      ///
      /// Locales: en, ar
      static func pleaseEnterHouseNo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter house no", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter house no"
        }

        return NSLocalizedString("Please enter house no", bundle: bundle, comment: "")
      }

      /// en translation: Please enter new confirmed password
      ///
      /// Locales: en, ar
      static func pleaseEnterNewConfirmedPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter new confirmed password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter new confirmed password"
        }

        return NSLocalizedString("Please enter new confirmed password", bundle: bundle, comment: "")
      }

      /// en translation: Please enter new password (must be at least 8 characters)
      ///
      /// Locales: en, ar
      static func pleaseEnterNewPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter new password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter new password"
        }

        return NSLocalizedString("Please enter new password", bundle: bundle, comment: "")
      }

      /// en translation: Please enter old password (must be at least 8 characters)
      ///
      /// Locales: en, ar
      static func pleaseEnterOldPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter old password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter old password"
        }

        return NSLocalizedString("Please enter old password", bundle: bundle, comment: "")
      }

      /// en translation: Please enter street  no
      ///
      /// Locales: en, ar
      static func pleaseEnterStreetNo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter street  no", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter street  no"
        }

        return NSLocalizedString("Please enter street  no", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the charge value
      ///
      /// Locales: en, ar
      static func pleaseEnterTheChargeValue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the charge value", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the charge value"
        }

        return NSLocalizedString("Please enter the charge value", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your address
      ///
      /// Locales: en, ar
      static func pleaseEnterYourAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your address"
        }

        return NSLocalizedString("Please enter your address", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your email
      ///
      /// Locales: en, ar
      static func pleaseEnterYourEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your email"
        }

        return NSLocalizedString("Please enter your email", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your first name
      ///
      /// Locales: en, ar
      static func pleaseEnterYourFirstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your first name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your first name"
        }

        return NSLocalizedString("Please enter your first name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your last name
      ///
      /// Locales: en, ar
      static func pleaseEnterYourLastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your last name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your last name"
        }

        return NSLocalizedString("Please enter your last name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your message
      ///
      /// Locales: en, ar
      static func pleaseEnterYourMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your message"
        }

        return NSLocalizedString("Please enter your message", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your name
      ///
      /// Locales: en, ar
      static func pleaseEnterYourName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your name"
        }

        return NSLocalizedString("Please enter your name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your password
      ///
      /// Locales: en, ar
      static func pleaseEnterYourPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your password"
        }

        return NSLocalizedString("Please enter your password", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your phone
      ///
      /// Locales: en, ar
      static func pleaseEnterYourPhone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter your phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter your phone"
        }

        return NSLocalizedString("Please enter your phone", bundle: bundle, comment: "")
      }

      /// en translation: Please login first
      ///
      /// Locales: en, ar
      static func pleaseLoginFirst(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please login first", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please login first"
        }

        return NSLocalizedString("Please login first", bundle: bundle, comment: "")
      }

      /// en translation: Please select area
      ///
      /// Locales: en, ar
      static func pleaseSelectArea(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select area", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select area"
        }

        return NSLocalizedString("Please select area", bundle: bundle, comment: "")
      }

      /// en translation: Please select delivery type
      ///
      /// Locales: en, ar
      static func pleaseSelectDeliveryType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select delivery type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select delivery type"
        }

        return NSLocalizedString("Please select delivery type", bundle: bundle, comment: "")
      }

      /// en translation: Please select order date
      ///
      /// Locales: en, ar
      static func pleaseSelectOrderDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select order date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select order date"
        }

        return NSLocalizedString("Please select order date", bundle: bundle, comment: "")
      }

      /// en translation: Please select order time
      ///
      /// Locales: en, ar
      static func pleaseSelectOrderTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select order time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select order time"
        }

        return NSLocalizedString("Please select order time", bundle: bundle, comment: "")
      }

      /// en translation: Please select payment method
      ///
      /// Locales: en, ar
      static func pleaseSelectPaymentMethod(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select payment method", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select payment method"
        }

        return NSLocalizedString("Please select payment method", bundle: bundle, comment: "")
      }

      /// en translation: Please select your address
      ///
      /// Locales: en, ar
      static func pleaseSelectYourAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select your address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select your address"
        }

        return NSLocalizedString("Please select your address", bundle: bundle, comment: "")
      }

      /// en translation: Poultry
      ///
      /// Locales: en, ar
      static func poultry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Poultry", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Poultry"
        }

        return NSLocalizedString("Poultry", bundle: bundle, comment: "")
      }

      /// en translation: Price (High to Low)
      ///
      /// Locales: en, ar
      static func priceHighToLow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Price (High to Low)", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Price (High to Low)"
        }

        return NSLocalizedString("Price (High to Low)", bundle: bundle, comment: "")
      }

      /// en translation: Price (Low to High)
      ///
      /// Locales: en, ar
      static func priceLowToHigh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Price (Low to High)", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Price (Low to High)"
        }

        return NSLocalizedString("Price (Low to High)", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: en, ar
      static func profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile"
        }

        return NSLocalizedString("Profile", bundle: bundle, comment: "")
      }

      /// en translation: Profile Updated
      ///
      /// Locales: en, ar
      static func profileUpdated(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile Updated", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile Updated"
        }

        return NSLocalizedString("Profile Updated", bundle: bundle, comment: "")
      }

      /// en translation: Promo code Applied!
      ///
      /// Locales: en, ar
      static func promoCodeApplied(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Promo code Applied!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Promo code Applied!"
        }

        return NSLocalizedString("Promo code Applied!", bundle: bundle, comment: "")
      }

      /// en translation: Quantity : 
      ///
      /// Locales: en, ar
      static func quantityLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("quantityLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "quantityLabel"
        }

        return NSLocalizedString("quantityLabel", bundle: bundle, comment: "")
      }

      /// en translation: Remove item
      ///
      /// Locales: en, ar
      static func removeItem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Remove item", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Remove item"
        }

        return NSLocalizedString("Remove item", bundle: bundle, comment: "")
      }

      /// en translation: Request Sent
      ///
      /// Locales: en, ar
      static func requestSent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Request Sent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Request Sent"
        }

        return NSLocalizedString("Request Sent", bundle: bundle, comment: "")
      }

      /// en translation: STREET
      ///
      /// Locales: en, ar
      static func streeT(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("STREET", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "STREET"
        }

        return NSLocalizedString("STREET", bundle: bundle, comment: "")
      }

      /// en translation: Saved Addresses
      ///
      /// Locales: en, ar
      static func savedAddresses(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Saved Addresses", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Saved Addresses"
        }

        return NSLocalizedString("Saved Addresses", bundle: bundle, comment: "")
      }

      /// en translation: See More
      ///
      /// Locales: en, ar
      static func seeMore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("See More", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "See More"
        }

        return NSLocalizedString("See More", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, ar
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings"
        }

        return NSLocalizedString("Settings", bundle: bundle, comment: "")
      }

      /// en translation: Shop
      ///
      /// Locales: en, ar
      static func shop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shop"
        }

        return NSLocalizedString("shop", bundle: bundle, comment: "")
      }

      /// en translation: Shops
      ///
      /// Locales: en, ar
      static func shops(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Shops", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Shops"
        }

        return NSLocalizedString("Shops", bundle: bundle, comment: "")
      }

      /// en translation: Something wen wrong!
      ///
      /// Locales: en, ar
      static func somethingWenWrong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Something wen wrong!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Something wen wrong!"
        }

        return NSLocalizedString("Something wen wrong!", bundle: bundle, comment: "")
      }

      /// en translation: Thanks
      ///
      /// Locales: en, ar
      static func thanks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Thanks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Thanks"
        }

        return NSLocalizedString("Thanks", bundle: bundle, comment: "")
      }

      /// en translation: Thanks for your message,  We will contact you soon.
      ///
      /// Locales: en, ar
      static func thanksForYourMessageWeWillContactYouSoon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Thanks for your message, We will contact you soon.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Thanks for your message, We will contact you soon."
        }

        return NSLocalizedString("Thanks for your message, We will contact you soon.", bundle: bundle, comment: "")
      }

      /// en translation: The coupon has been already used
      ///
      /// Locales: en, ar
      static func coponIsAlreadyUsed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CoponIsAlreadyUsed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CoponIsAlreadyUsed"
        }

        return NSLocalizedString("CoponIsAlreadyUsed", bundle: bundle, comment: "")
      }

      /// en translation: There Is no Saved boxes yet,  Please add a box & add items
      ///
      /// Locales: en, ar
      static func boxesEmptyMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("boxesEmptyMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "boxesEmptyMessage"
        }

        return NSLocalizedString("boxesEmptyMessage", bundle: bundle, comment: "")
      }

      /// en translation: There are no notifications
      ///
      /// Locales: en, ar
      static func thereAreNoNotifications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("There are no notifications", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "There are no notifications"
        }

        return NSLocalizedString("There are no notifications", bundle: bundle, comment: "")
      }

      /// en translation: There are no orders
      ///
      /// Locales: en, ar
      static func noOrders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noOrders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "noOrders"
        }

        return NSLocalizedString("noOrders", bundle: bundle, comment: "")
      }

      /// en translation: There are no products
      ///
      /// Locales: en, ar
      static func thereAreNoProducts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("There are no products", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "There are no products"
        }

        return NSLocalizedString("There are no products", bundle: bundle, comment: "")
      }

      /// en translation: There are no shops
      ///
      /// Locales: en, ar
      static func thereAreNoShops(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("There are no shops", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "There are no shops"
        }

        return NSLocalizedString("There are no shops", bundle: bundle, comment: "")
      }

      /// en translation: There is no items in box.  Add Items
      ///
      /// Locales: en, ar
      static func thereIsNoItemsInBoxAddItems(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("There is no items in box. Add Items", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "There is no items in box. Add Items"
        }

        return NSLocalizedString("There is no items in box. Add Items", bundle: bundle, comment: "")
      }

      /// en translation: This item is unavailable now
      ///
      /// Locales: en, ar
      static func thisItemIsUnavailableNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This item is unavailable now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This item is unavailable now"
        }

        return NSLocalizedString("This item is unavailable now", bundle: bundle, comment: "")
      }

      /// en translation: Try Again
      ///
      /// Locales: en, ar
      static func tryAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Try Again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Try Again"
        }

        return NSLocalizedString("Try Again", bundle: bundle, comment: "")
      }

      /// en translation: Unavailable !
      ///
      /// Locales: en, ar
      static func unavailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unavailable !", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unavailable !"
        }

        return NSLocalizedString("Unavailable !", bundle: bundle, comment: "")
      }

      /// en translation: Update
      ///
      /// Locales: en, ar
      static func update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Update"
        }

        return NSLocalizedString("Update", bundle: bundle, comment: "")
      }

      /// en translation: Wallet
      ///
      /// Locales: en, ar
      static func wallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wallet"
        }

        return NSLocalizedString("Wallet", bundle: bundle, comment: "")
      }

      /// en translation: Wishlist
      ///
      /// Locales: en, ar
      static func wishlist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wishlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wishlist"
        }

        return NSLocalizedString("Wishlist", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en, ar
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yes"
        }

        return NSLocalizedString("Yes", bundle: bundle, comment: "")
      }

      /// en translation: You have to login first to perform this action !
      ///
      /// Locales: en, ar
      static func profileGuestMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profileGuestMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profileGuestMessage"
        }

        return NSLocalizedString("profileGuestMessage", bundle: bundle, comment: "")
      }

      /// en translation: Your cart is empty
      ///
      /// Locales: en, ar
      static func yourCartIsEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your cart is empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your cart is empty"
        }

        return NSLocalizedString("Your cart is empty", bundle: bundle, comment: "")
      }

      /// en translation: not available, you need to update your cart to continue
      ///
      /// Locales: en, ar
      static func notAvailableYouNeedToUpdateCart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("not available, you need to update cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "not available, you need to update cart"
        }

        return NSLocalizedString("not available, you need to update cart", bundle: bundle, comment: "")
      }

      /// en translation: shop available
      ///
      /// Locales: en, ar
      static func shopAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shop available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shop available"
        }

        return NSLocalizedString("shop available", bundle: bundle, comment: "")
      }

      /// en translation: to
      ///
      /// Locales: en, ar
      static func to(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("to", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "to"
        }

        return NSLocalizedString("to", bundle: bundle, comment: "")
      }

      /// en translation: wrong email address/password
      ///
      /// Locales: en, ar
      static func wrongEmailAddressPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wrong email address/password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wrong email address/password"
        }

        return NSLocalizedString("wrong email address/password", bundle: bundle, comment: "")
      }

      /// en translation: you have reach to maximum quantity of this product
      ///
      /// Locales: en, ar
      static func maxPrdctCount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("max prdct count", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "max prdct count"
        }

        return NSLocalizedString("max prdct count", bundle: bundle, comment: "")
      }

      /// en translation: you have reach to maximum quantity of this product
      ///
      /// Locales: en, ar
      static func youHaveReachToMaximumQuantityOfThisProduct(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("you have reach to maximum quantity of this product", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "you have reach to maximum quantity of this product"
        }

        return NSLocalizedString("you have reach to maximum quantity of this product", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 155 localization keys.
    struct main {
      /// ar translation: 
      ///
      /// Locales: ar
      static let adimcQdText = Rswift.StringResource(key: "2AD-IM-cQd.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let bn53YTj0Text = Rswift.StringResource(key: "bn5-3Y-Tj0.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let dVkXbVZgText = Rswift.StringResource(key: "dVk-xb-VZg.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let dm9GaVVXText = Rswift.StringResource(key: "dm9-ga-VVX.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let gWg5Y1etText = Rswift.StringResource(key: "GWg-5Y-1et.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let hZjObC3UText = Rswift.StringResource(key: "HZj-Ob-c3U.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let hbxUmPOtText = Rswift.StringResource(key: "hbx-Um-POt.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let ineR5QmKText = Rswift.StringResource(key: "ine-r5-qmK.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let j0TTBDr8Text = Rswift.StringResource(key: "J0T-TB-dr8.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let j4WVuQzSText = Rswift.StringResource(key: "J4W-Vu-QzS.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let mLqFcNfNText = Rswift.StringResource(key: "MLq-Fc-nfN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let nGTAkPqVText = Rswift.StringResource(key: "nGT-Ak-pqV.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let oOoHpBKMText = Rswift.StringResource(key: "OOo-Hp-bKM.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let pMtOdYCJText = Rswift.StringResource(key: "pMt-Od-yCJ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let pPiJK6GLText = Rswift.StringResource(key: "pPi-jK-6GL.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let qrJAfCtoText = Rswift.StringResource(key: "qrJ-af-Cto.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let rqNBSTHSText = Rswift.StringResource(key: "rqN-BS-tHS.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let sdWK8YcuText = Rswift.StringResource(key: "SdW-k8-ycu.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let taKBd5b7Text = Rswift.StringResource(key: "TaK-bd-5b7.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let uADJhGRWText = Rswift.StringResource(key: "uAD-jh-gRW.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let uetGHG3cText = Rswift.StringResource(key: "Uet-gH-g3c.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let ukmGcTL6Text = Rswift.StringResource(key: "ukm-Gc-tL6.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let v63MuI3rText = Rswift.StringResource(key: "v63-mu-I3r.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let xx7PuHKAText = Rswift.StringResource(key: "Xx7-pu-HKA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation:  لا توجد صناديق متاحة حاليا
      ///
      /// Locales: ar
      static let eeWXNZfKText = Rswift.StringResource(key: "EeW-xN-zfK.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 5 persons
      ///
      /// Locales: ar
      static let mn2VLK0eText = Rswift.StringResource(key: "mn2-VL-k0e.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Label
      ///
      /// Locales: ar
      static let phcGTSmMText = Rswift.StringResource(key: "phc-GT-SmM.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Meat lover box
      ///
      /// Locales: ar
      static let xJfHBFvBText = Rswift.StringResource(key: "XJf-HB-FvB.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: Option 1, Option 2
      ///
      /// Locales: ar
      static let rv2MQJnrText = Rswift.StringResource(key: "RV2-MQ-jnr.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: categoryName
      ///
      /// Locales: ar
      static let boLH8ARPText = Rswift.StringResource(key: "boL-h8-ARP.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: username@gmail.com
      ///
      /// Locales: ar
      static let yqwzg5RXText = Rswift.StringResource(key: "YQW-zG-5RX.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أضف الى السلة
      ///
      /// Locales: ar
      static let gj7Q3Bg6NormalTitle = Rswift.StringResource(key: "Gj7-Q3-Bg6.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أضف الى السلة
      ///
      /// Locales: ar
      static let pocOl5AoNormalTitle = Rswift.StringResource(key: "poc-ol-5Ao.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أضف الى صندوقى
      ///
      /// Locales: ar
      static let c2PD1FZ8NormalTitle = Rswift.StringResource(key: "c2P-D1-FZ8.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أضف الى صندوقى
      ///
      /// Locales: ar
      static let dszCuVihText = Rswift.StringResource(key: "dsz-Cu-Vih.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أكتب هنا
      ///
      /// Locales: ar
      static let obxJERvlText = Rswift.StringResource(key: "obx-jE-Rvl.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أكتب هنا
      ///
      /// Locales: ar
      static let uyaGPCBRPlaceholder = Rswift.StringResource(key: "Uya-gP-cBR.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إجمالي المنتجات
      ///
      /// Locales: ar
      static let c3UI521nText = Rswift.StringResource(key: "c3U-I5-21n.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إختياراتنا
      ///
      /// Locales: ar
      static let iINQJIvPText = Rswift.StringResource(key: "iIN-QJ-ivP.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إختياراتنا
      ///
      /// Locales: ar
      static let ys57UMdHText = Rswift.StringResource(key: "Ys5-7U-mdH.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إضافات (اختياري)
      ///
      /// Locales: ar
      static let cYFgYpYText = Rswift.StringResource(key: "7cY-fg-YpY.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إضافة
      ///
      /// Locales: ar
      static let vBfGn33SNormalTitle = Rswift.StringResource(key: "VBf-gn-33S.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إضافة عنوان
      ///
      /// Locales: ar
      static let esxWvTHhText = Rswift.StringResource(key: "esx-wv-THh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إضافة عنوان
      ///
      /// Locales: ar
      static let f7e33OYANormalTitle = Rswift.StringResource(key: "f7e-33-OYA.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إضافة عنوان جديد
      ///
      /// Locales: ar
      static let keP9w2DaNormalTitle = Rswift.StringResource(key: "keP-9w-2Da.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إعادة الطلب
      ///
      /// Locales: ar
      static let ivpA72XZText = Rswift.StringResource(key: "Ivp-A7-2XZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إعادة الطلب
      ///
      /// Locales: ar
      static let qNTOYJ0bText = Rswift.StringResource(key: "qNT-oY-J0b.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: استمرار
      ///
      /// Locales: ar
      static let zHcSwM9jNormalTitle = Rswift.StringResource(key: "ZHc-sw-M9j.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم الصندوق
      ///
      /// Locales: ar
      static let uhQc8rCText = Rswift.StringResource(key: "3Uh-qc-8rC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم العميل*
      ///
      /// Locales: ar
      static let d3XLQ3RdPlaceholder = Rswift.StringResource(key: "D3X-lQ-3Rd.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم العنوان*
      ///
      /// Locales: ar
      static let h958VICLPlaceholder = Rswift.StringResource(key: "h95-8V-ICL.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم العنوان*
      ///
      /// Locales: ar
      static let mEFM3qPlaceholder = Rswift.StringResource(key: "28m-eF-m3q.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم العنوان*
      ///
      /// Locales: ar
      static let y2SIQHqsPlaceholder = Rswift.StringResource(key: "y2S-iQ-hqs.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم المتجر
      ///
      /// Locales: ar
      static let rIGIxUText = Rswift.StringResource(key: "93r-iG-IxU.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم المتجر
      ///
      /// Locales: ar
      static let ruey89YSText = Rswift.StringResource(key: "RUE-y8-9YS.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم المتجر
      ///
      /// Locales: ar
      static let w8BRB1rMText = Rswift.StringResource(key: "W8B-rB-1rM.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم المنتج
      ///
      /// Locales: ar
      static let cyC3EJ1AText = Rswift.StringResource(key: "cyC-3E-J1A.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم المنتج
      ///
      /// Locales: ar
      static let iWrHRS7RText = Rswift.StringResource(key: "iWr-hR-s7R.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم المنتج
      ///
      /// Locales: ar
      static let kIQBYG2KText = Rswift.StringResource(key: "kIQ-BY-g2K.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم المنتج
      ///
      /// Locales: ar
      static let l2ABhEitText = Rswift.StringResource(key: "L2A-bh-Eit.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اسم المنتج
      ///
      /// Locales: ar
      static let tloZoMd3Text = Rswift.StringResource(key: "Tlo-zo-Md3.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الإجمالى
      ///
      /// Locales: ar
      static let be4MVyaText = Rswift.StringResource(key: "5BE-4M-Vya.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الإشعارات
      ///
      /// Locales: ar
      static let deFUg4KfText = Rswift.StringResource(key: "deF-ug-4Kf.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الإعدادات
      ///
      /// Locales: ar
      static let iN5VNZVeTitle = Rswift.StringResource(key: "iN5-vN-ZVe.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاسم الأخير
      ///
      /// Locales: ar
      static let him9HUoIPlaceholder = Rswift.StringResource(key: "Him-9H-UoI.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاسم الأول
      ///
      /// Locales: ar
      static let fRaWxNKZPlaceholder = Rswift.StringResource(key: "FRa-Wx-NKZ.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: البريد الإلكترونى(إختياري)
      ///
      /// Locales: ar
      static let cAf7VE5NPlaceholder = Rswift.StringResource(key: "CAf-7V-e5N.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الخصم
      ///
      /// Locales: ar
      static let uNI92GkTText = Rswift.StringResource(key: "uNI-92-GkT.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الرئيسية
      ///
      /// Locales: ar
      static let ypndnEuLTitle = Rswift.StringResource(key: "YPN-DN-euL.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: السعر
      ///
      /// Locales: ar
      static let sXWDAAeuText = Rswift.StringResource(key: "sXW-DA-Aeu.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: السعر
      ///
      /// Locales: ar
      static let tdJ9DEYText = Rswift.StringResource(key: "5td-j9-dEY.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: السعر
      ///
      /// Locales: ar
      static let vUjFgD7FText = Rswift.StringResource(key: "vUj-Fg-d7F.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: السعر
      ///
      /// Locales: ar
      static let y7dEbGXeText = Rswift.StringResource(key: "y7d-eb-gXe.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: القطعة*
      ///
      /// Locales: ar
      static let hYt3mS4APlaceholder = Rswift.StringResource(key: "hYt-3m-s4A.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: القطعة*
      ///
      /// Locales: ar
      static let nviUmR4rPlaceholder = Rswift.StringResource(key: "NVI-um-R4r.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: القطعة*
      ///
      /// Locales: ar
      static let p3O4NRzTPlaceholder = Rswift.StringResource(key: "P3O-4N-rzT.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الكمية: ٢
      ///
      /// Locales: ar
      static let czeRhBHCText = Rswift.StringResource(key: "Cze-Rh-BHC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الكمية: ٢
      ///
      /// Locales: ar
      static let ggVZhQooText = Rswift.StringResource(key: "GgV-Zh-Qoo.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: المتاجر
      ///
      /// Locales: ar
      static let dfqGuX2yNormalTitle = Rswift.StringResource(key: "DFQ-gu-x2y.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: المتاجر
      ///
      /// Locales: ar
      static let lwVIAPuYTitle = Rswift.StringResource(key: "LwV-iA-PuY.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: المفضلة
      ///
      /// Locales: ar
      static let jsdQb3zSText = Rswift.StringResource(key: "JSD-Qb-3zS.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: المنتجات
      ///
      /// Locales: ar
      static let l452zNKYNormalTitle = Rswift.StringResource(key: "l45-2z-NKY.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: المنتجات: ٢
      ///
      /// Locales: ar
      static let kgrCtXW2Text = Rswift.StringResource(key: "Kgr-Ct-xW2.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: المنطقة*
      ///
      /// Locales: ar
      static let ffcXUPudPlaceholder = Rswift.StringResource(key: "Ffc-xU-pud.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: المنطقة*
      ///
      /// Locales: ar
      static let lk2D8DMuPlaceholder = Rswift.StringResource(key: "lk2-D8-dMu.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: المنطقة*
      ///
      /// Locales: ar
      static let s18M2Q09Placeholder = Rswift.StringResource(key: "S18-m2-Q09.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تأكيد كلمة المرور
      ///
      /// Locales: ar
      static let qnr4vPU3Placeholder = Rswift.StringResource(key: "QNR-4v-pU3.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تاريخ التوصيل
      ///
      /// Locales: ar
      static let izaLpT0eText = Rswift.StringResource(key: "IZA-lp-T0e.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تاريخ الطلب
      ///
      /// Locales: ar
      static let vwtPUFoOText = Rswift.StringResource(key: "vwt-PU-foO.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تاريخ الطلب
      ///
      /// Locales: ar
      static let ypZNKPm5Text = Rswift.StringResource(key: "YpZ-nK-Pm5.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجيل الخروج
      ///
      /// Locales: ar
      static let i50GLGYzNormalTitle = Rswift.StringResource(key: "I50-gL-gYz.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تسجيل الدخول
      ///
      /// Locales: ar
      static let cPtXNDqzNormalTitle = Rswift.StringResource(key: "cPt-xN-dqz.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تصفية حسب
      ///
      /// Locales: ar
      static let ah0BTX9KText = Rswift.StringResource(key: "AH0-BT-x9K.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تطبيق
      ///
      /// Locales: ar
      static let f9gX027qNormalTitle = Rswift.StringResource(key: "f9g-X0-27q.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تطبيق
      ///
      /// Locales: ar
      static let xZFQ7DyPNormalTitle = Rswift.StringResource(key: "xZF-q7-DyP.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تعديل
      ///
      /// Locales: ar
      static let aAuNwDbhNormalTitle = Rswift.StringResource(key: "aAu-Nw-dbh.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تعديل
      ///
      /// Locales: ar
      static let y9XO6XeDNormalTitle = Rswift.StringResource(key: "Y9X-O6-XeD.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تعديل العنوان
      ///
      /// Locales: ar
      static let dtKvGz7Text = Rswift.StringResource(key: "4DT-Kv-Gz7.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تعديل حسابى
      ///
      /// Locales: ar
      static let pkz52ThyText = Rswift.StringResource(key: "Pkz-52-thy.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تعديل عنوان
      ///
      /// Locales: ar
      static let tGmNKJyGNormalTitle = Rswift.StringResource(key: "tGm-nK-jyG.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تغيير كلمة المرور
      ///
      /// Locales: ar
      static let on9HHTAzText = Rswift.StringResource(key: "ON9-hH-tAz.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تغيير كلمة المرور
      ///
      /// Locales: ar
      static let uh3VcWhWNormalTitle = Rswift.StringResource(key: "UH3-vc-whW.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تفاصيل الدفع
      ///
      /// Locales: ar
      static let dmNTdUiaText = Rswift.StringResource(key: "DmN-Td-Uia.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تفاصيل الطلب
      ///
      /// Locales: ar
      static let ipnOKMrxText = Rswift.StringResource(key: "ipn-OK-Mrx.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تم التوصيل
      ///
      /// Locales: ar
      static let aqpFaQZ3Text = Rswift.StringResource(key: "AQP-Fa-QZ3.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تم التوصيل
      ///
      /// Locales: ar
      static let q2sCVyText = Rswift.StringResource(key: "10Q-2s-CVy.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تم تعديل كلمة المرور بنجاح
      ///
      /// Locales: ar
      static let aL7WMDRuText = Rswift.StringResource(key: "aL7-WM-dRu.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تم تغيير كلمة المرور
      ///
      /// Locales: ar
      static let buLhQhPText = Rswift.StringResource(key: "5BU-Lh-qhP.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: حسابى
      ///
      /// Locales: ar
      static let kfYXQKlhTitle = Rswift.StringResource(key: "kfY-XQ-Klh.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: د.ك
      ///
      /// Locales: ar
      static let pmhtdf42Text = Rswift.StringResource(key: "PMH-tD-f42.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رتب حسب
      ///
      /// Locales: ar
      static let trKWgHaQText = Rswift.StringResource(key: "trK-Wg-HaQ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رسوم التوصيل
      ///
      /// Locales: ar
      static let nhyXeDvrText = Rswift.StringResource(key: "NHY-xe-dvr.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الدفع
      ///
      /// Locales: ar
      static let nTf2cXMmText = Rswift.StringResource(key: "NTf-2c-xMm.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الشارع*
      ///
      /// Locales: ar
      static let dcPZJPSHPlaceholder = Rswift.StringResource(key: "dcP-ZJ-pSH.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الشارع*
      ///
      /// Locales: ar
      static let yagPdzPlaceholder = Rswift.StringResource(key: "20Y-aG-pdz.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الشارع*
      ///
      /// Locales: ar
      static let zuuzqYeWPlaceholder = Rswift.StringResource(key: "ZUU-ZQ-YeW.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الشقة
      ///
      /// Locales: ar
      static let kRqOqF0iPlaceholder = Rswift.StringResource(key: "KRq-Oq-F0i.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الشقة
      ///
      /// Locales: ar
      static let s00DCuvPlaceholder = Rswift.StringResource(key: "8S0-0D-cuv.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الشقة
      ///
      /// Locales: ar
      static let yeQHdWwbPlaceholder = Rswift.StringResource(key: "yeQ-Hd-Wwb.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الطابق
      ///
      /// Locales: ar
      static let i1EZYpvPlaceholder = Rswift.StringResource(key: "8I1-EZ-Ypv.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الطابق
      ///
      /// Locales: ar
      static let qYlZBQXEPlaceholder = Rswift.StringResource(key: "qYl-zB-QXE.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الطابق
      ///
      /// Locales: ar
      static let sgKYrXAWPlaceholder = Rswift.StringResource(key: "sgK-Yr-XAW.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الطلب
      ///
      /// Locales: ar
      static let bFJUYQ0JText = Rswift.StringResource(key: "bFJ-uY-Q0J.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الطلب
      ///
      /// Locales: ar
      static let qt9IuZOGText = Rswift.StringResource(key: "qt9-Iu-ZOG.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم المبنى*
      ///
      /// Locales: ar
      static let alTwMbdPlaceholder = Rswift.StringResource(key: "5Al-tw-Mbd.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم المبنى*
      ///
      /// Locales: ar
      static let c6gPxBtsPlaceholder = Rswift.StringResource(key: "C6g-px-bts.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم المبنى*
      ///
      /// Locales: ar
      static let f5gXNIrKPlaceholder = Rswift.StringResource(key: "F5g-XN-IrK.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم المعاملة
      ///
      /// Locales: ar
      static let g6QGOWcOText = Rswift.StringResource(key: "g6Q-GO-WcO.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الهاتف
      ///
      /// Locales: ar
      static let j0PVoA3ePlaceholder = Rswift.StringResource(key: "j0P-vo-a3e.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الهاتف*
      ///
      /// Locales: ar
      static let aiKHnVGcPlaceholder = Rswift.StringResource(key: "AiK-hn-VGc.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: صناديقنا
      ///
      /// Locales: ar
      static let hURRLEe8Text = Rswift.StringResource(key: "hUR-RL-ee8.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: صناديقنا
      ///
      /// Locales: ar
      static let n9XHwKxrText = Rswift.StringResource(key: "N9X-hw-kxr.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: صندوقى
      ///
      /// Locales: ar
      static let gZuHF6ECTitle = Rswift.StringResource(key: "gZu-HF-6EC.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: طريقة التوصيل
      ///
      /// Locales: ar
      static let mbYRDOP0Text = Rswift.StringResource(key: "mbY-RD-oP0.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: طريقة الدفع
      ///
      /// Locales: ar
      static let vxBnaText = Rswift.StringResource(key: "870-VX-Bna.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: طلب إلغاء
      ///
      /// Locales: ar
      static let nr9JKK3SNormalTitle = Rswift.StringResource(key: "Nr9-jK-K3S.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: طلباتى
      ///
      /// Locales: ar
      static let dfu3eRF7Text = Rswift.StringResource(key: "dfu-3e-RF7.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عرض السلة
      ///
      /// Locales: ar
      static let mrlEw2itNormalTitle = Rswift.StringResource(key: "MRL-ew-2it.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عرض السلة
      ///
      /// Locales: ar
      static let pNwW8Y5XNormalTitle = Rswift.StringResource(key: "pNw-w8-y5X.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عرض الكل
      ///
      /// Locales: ar
      static let lj8jGPrNormalTitle = Rswift.StringResource(key: "6Lj-8j-GPr.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عرض الكل
      ///
      /// Locales: ar
      static let ozgYkTh1NormalTitle = Rswift.StringResource(key: "OZG-Yk-th1.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عناوينى
      ///
      /// Locales: ar
      static let ndsH0Xo0Text = Rswift.StringResource(key: "Nds-h0-Xo0.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عنوان التوصيل
      ///
      /// Locales: ar
      static let oI7H0ZGkText = Rswift.StringResource(key: "oI7-H0-zGk.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: عنوان التوصيل
      ///
      /// Locales: ar
      static let yj6KREENText = Rswift.StringResource(key: "yj6-KR-EEN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: كلمة المرور الجديدة
      ///
      /// Locales: ar
      static let ufcKoOgWPlaceholder = Rswift.StringResource(key: "Ufc-ko-ogW.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: كلمة المرور الحالية
      ///
      /// Locales: ar
      static let itiCZRHXPlaceholder = Rswift.StringResource(key: "Iti-CZ-rHX.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: لا يوجد عناوين متاحة
      ///
      /// Locales: ar
      static let lcb0pWDMText = Rswift.StringResource(key: "lcb-0p-wDM.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: لا يوجد عناوين يرجى إضافة عنوان جديد
      ///
      /// Locales: ar
      static let raa3QUB1Text = Rswift.StringResource(key: "Raa-3Q-uB1.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: لحوم
      ///
      /// Locales: ar
      static let aWuDbG4MText = Rswift.StringResource(key: "aWu-Db-G4M.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: لحوم
      ///
      /// Locales: ar
      static let aacLj3xXText = Rswift.StringResource(key: "Aac-Lj-3xX.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: لحوم
      ///
      /// Locales: ar
      static let omyXdWJUText = Rswift.StringResource(key: "omy-xd-WJU.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: معاد التوصيل
      ///
      /// Locales: ar
      static let goINVZs9Text = Rswift.StringResource(key: "GoI-NV-Zs9.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: ملخص الطلب
      ///
      /// Locales: ar
      static let zAj8wFlZText = Rswift.StringResource(key: "ZAj-8w-FlZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: •
      ///
      /// Locales: ar
      static let kw2NqBpyText = Rswift.StringResource(key: "Kw2-Nq-bpy.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: •
      ///
      /// Locales: ar
      static let x27lT4RText = Rswift.StringResource(key: "1x2-7l-t4R.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ar"], comment: nil)

      /// ar translation: 
      ///
      /// Locales: ar
      static func adimcQdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2AD-IM-cQd.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2AD-IM-cQd.text"
        }

        return NSLocalizedString("2AD-IM-cQd.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func bn53YTj0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bn5-3Y-Tj0.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bn5-3Y-Tj0.text"
        }

        return NSLocalizedString("bn5-3Y-Tj0.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func dVkXbVZgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dVk-xb-VZg.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "dVk-xb-VZg.text"
        }

        return NSLocalizedString("dVk-xb-VZg.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func dm9GaVVXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dm9-ga-VVX.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "dm9-ga-VVX.text"
        }

        return NSLocalizedString("dm9-ga-VVX.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func gWg5Y1etText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GWg-5Y-1et.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "GWg-5Y-1et.text"
        }

        return NSLocalizedString("GWg-5Y-1et.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func hZjObC3UText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HZj-Ob-c3U.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "HZj-Ob-c3U.text"
        }

        return NSLocalizedString("HZj-Ob-c3U.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func hbxUmPOtText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hbx-Um-POt.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hbx-Um-POt.text"
        }

        return NSLocalizedString("hbx-Um-POt.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func ineR5QmKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ine-r5-qmK.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ine-r5-qmK.text"
        }

        return NSLocalizedString("ine-r5-qmK.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func j0TTBDr8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("J0T-TB-dr8.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "J0T-TB-dr8.text"
        }

        return NSLocalizedString("J0T-TB-dr8.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func j4WVuQzSText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("J4W-Vu-QzS.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "J4W-Vu-QzS.text"
        }

        return NSLocalizedString("J4W-Vu-QzS.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func mLqFcNfNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MLq-Fc-nfN.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "MLq-Fc-nfN.text"
        }

        return NSLocalizedString("MLq-Fc-nfN.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func nGTAkPqVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nGT-Ak-pqV.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "nGT-Ak-pqV.text"
        }

        return NSLocalizedString("nGT-Ak-pqV.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func oOoHpBKMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OOo-Hp-bKM.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "OOo-Hp-bKM.text"
        }

        return NSLocalizedString("OOo-Hp-bKM.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func pMtOdYCJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pMt-Od-yCJ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "pMt-Od-yCJ.text"
        }

        return NSLocalizedString("pMt-Od-yCJ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func pPiJK6GLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pPi-jK-6GL.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "pPi-jK-6GL.text"
        }

        return NSLocalizedString("pPi-jK-6GL.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func qrJAfCtoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qrJ-af-Cto.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qrJ-af-Cto.text"
        }

        return NSLocalizedString("qrJ-af-Cto.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func rqNBSTHSText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rqN-BS-tHS.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rqN-BS-tHS.text"
        }

        return NSLocalizedString("rqN-BS-tHS.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func sdWK8YcuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SdW-k8-ycu.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "SdW-k8-ycu.text"
        }

        return NSLocalizedString("SdW-k8-ycu.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func taKBd5b7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TaK-bd-5b7.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "TaK-bd-5b7.text"
        }

        return NSLocalizedString("TaK-bd-5b7.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func uADJhGRWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uAD-jh-gRW.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "uAD-jh-gRW.text"
        }

        return NSLocalizedString("uAD-jh-gRW.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func uetGHG3cText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Uet-gH-g3c.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Uet-gH-g3c.text"
        }

        return NSLocalizedString("Uet-gH-g3c.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func ukmGcTL6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ukm-Gc-tL6.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ukm-Gc-tL6.text"
        }

        return NSLocalizedString("ukm-Gc-tL6.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func v63MuI3rText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("v63-mu-I3r.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "v63-mu-I3r.text"
        }

        return NSLocalizedString("v63-mu-I3r.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func xx7PuHKAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Xx7-pu-HKA.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Xx7-pu-HKA.text"
        }

        return NSLocalizedString("Xx7-pu-HKA.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation:  لا توجد صناديق متاحة حاليا
      ///
      /// Locales: ar
      static func eeWXNZfKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EeW-xN-zfK.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "EeW-xN-zfK.text"
        }

        return NSLocalizedString("EeW-xN-zfK.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: 5 persons
      ///
      /// Locales: ar
      static func mn2VLK0eText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mn2-VL-k0e.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "mn2-VL-k0e.text"
        }

        return NSLocalizedString("mn2-VL-k0e.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: Label
      ///
      /// Locales: ar
      static func phcGTSmMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phc-GT-SmM.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "phc-GT-SmM.text"
        }

        return NSLocalizedString("phc-GT-SmM.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: Meat lover box
      ///
      /// Locales: ar
      static func xJfHBFvBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XJf-HB-FvB.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "XJf-HB-FvB.text"
        }

        return NSLocalizedString("XJf-HB-FvB.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: Option 1, Option 2
      ///
      /// Locales: ar
      static func rv2MQJnrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RV2-MQ-jnr.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "RV2-MQ-jnr.text"
        }

        return NSLocalizedString("RV2-MQ-jnr.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: categoryName
      ///
      /// Locales: ar
      static func boLH8ARPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("boL-h8-ARP.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "boL-h8-ARP.text"
        }

        return NSLocalizedString("boL-h8-ARP.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: username@gmail.com
      ///
      /// Locales: ar
      static func yqwzg5RXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YQW-zG-5RX.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "YQW-zG-5RX.text"
        }

        return NSLocalizedString("YQW-zG-5RX.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: أضف الى السلة
      ///
      /// Locales: ar
      static func gj7Q3Bg6NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gj7-Q3-Bg6.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Gj7-Q3-Bg6.normalTitle"
        }

        return NSLocalizedString("Gj7-Q3-Bg6.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: أضف الى السلة
      ///
      /// Locales: ar
      static func pocOl5AoNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("poc-ol-5Ao.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "poc-ol-5Ao.normalTitle"
        }

        return NSLocalizedString("poc-ol-5Ao.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: أضف الى صندوقى
      ///
      /// Locales: ar
      static func c2PD1FZ8NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("c2P-D1-FZ8.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "c2P-D1-FZ8.normalTitle"
        }

        return NSLocalizedString("c2P-D1-FZ8.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: أضف الى صندوقى
      ///
      /// Locales: ar
      static func dszCuVihText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dsz-Cu-Vih.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "dsz-Cu-Vih.text"
        }

        return NSLocalizedString("dsz-Cu-Vih.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: أكتب هنا
      ///
      /// Locales: ar
      static func obxJERvlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("obx-jE-Rvl.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "obx-jE-Rvl.text"
        }

        return NSLocalizedString("obx-jE-Rvl.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: أكتب هنا
      ///
      /// Locales: ar
      static func uyaGPCBRPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Uya-gP-cBR.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Uya-gP-cBR.placeholder"
        }

        return NSLocalizedString("Uya-gP-cBR.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: إجمالي المنتجات
      ///
      /// Locales: ar
      static func c3UI521nText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("c3U-I5-21n.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "c3U-I5-21n.text"
        }

        return NSLocalizedString("c3U-I5-21n.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: إختياراتنا
      ///
      /// Locales: ar
      static func iINQJIvPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iIN-QJ-ivP.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "iIN-QJ-ivP.text"
        }

        return NSLocalizedString("iIN-QJ-ivP.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: إختياراتنا
      ///
      /// Locales: ar
      static func ys57UMdHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ys5-7U-mdH.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Ys5-7U-mdH.text"
        }

        return NSLocalizedString("Ys5-7U-mdH.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: إضافات (اختياري)
      ///
      /// Locales: ar
      static func cYFgYpYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7cY-fg-YpY.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "7cY-fg-YpY.text"
        }

        return NSLocalizedString("7cY-fg-YpY.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: إضافة
      ///
      /// Locales: ar
      static func vBfGn33SNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VBf-gn-33S.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "VBf-gn-33S.normalTitle"
        }

        return NSLocalizedString("VBf-gn-33S.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: إضافة عنوان
      ///
      /// Locales: ar
      static func esxWvTHhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("esx-wv-THh.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "esx-wv-THh.text"
        }

        return NSLocalizedString("esx-wv-THh.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: إضافة عنوان
      ///
      /// Locales: ar
      static func f7e33OYANormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("f7e-33-OYA.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "f7e-33-OYA.normalTitle"
        }

        return NSLocalizedString("f7e-33-OYA.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: إضافة عنوان جديد
      ///
      /// Locales: ar
      static func keP9w2DaNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("keP-9w-2Da.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "keP-9w-2Da.normalTitle"
        }

        return NSLocalizedString("keP-9w-2Da.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: إعادة الطلب
      ///
      /// Locales: ar
      static func ivpA72XZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ivp-A7-2XZ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Ivp-A7-2XZ.text"
        }

        return NSLocalizedString("Ivp-A7-2XZ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: إعادة الطلب
      ///
      /// Locales: ar
      static func qNTOYJ0bText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qNT-oY-J0b.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qNT-oY-J0b.text"
        }

        return NSLocalizedString("qNT-oY-J0b.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: استمرار
      ///
      /// Locales: ar
      static func zHcSwM9jNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZHc-sw-M9j.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ZHc-sw-M9j.normalTitle"
        }

        return NSLocalizedString("ZHc-sw-M9j.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: اسم الصندوق
      ///
      /// Locales: ar
      static func uhQc8rCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3Uh-qc-8rC.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "3Uh-qc-8rC.text"
        }

        return NSLocalizedString("3Uh-qc-8rC.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: اسم العميل*
      ///
      /// Locales: ar
      static func d3XLQ3RdPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("D3X-lQ-3Rd.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "D3X-lQ-3Rd.placeholder"
        }

        return NSLocalizedString("D3X-lQ-3Rd.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: اسم العنوان*
      ///
      /// Locales: ar
      static func h958VICLPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("h95-8V-ICL.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "h95-8V-ICL.placeholder"
        }

        return NSLocalizedString("h95-8V-ICL.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: اسم العنوان*
      ///
      /// Locales: ar
      static func mEFM3qPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("28m-eF-m3q.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "28m-eF-m3q.placeholder"
        }

        return NSLocalizedString("28m-eF-m3q.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: اسم العنوان*
      ///
      /// Locales: ar
      static func y2SIQHqsPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("y2S-iQ-hqs.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "y2S-iQ-hqs.placeholder"
        }

        return NSLocalizedString("y2S-iQ-hqs.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: اسم المتجر
      ///
      /// Locales: ar
      static func rIGIxUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("93r-iG-IxU.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "93r-iG-IxU.text"
        }

        return NSLocalizedString("93r-iG-IxU.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: اسم المتجر
      ///
      /// Locales: ar
      static func ruey89YSText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RUE-y8-9YS.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "RUE-y8-9YS.text"
        }

        return NSLocalizedString("RUE-y8-9YS.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: اسم المتجر
      ///
      /// Locales: ar
      static func w8BRB1rMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("W8B-rB-1rM.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "W8B-rB-1rM.text"
        }

        return NSLocalizedString("W8B-rB-1rM.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: اسم المنتج
      ///
      /// Locales: ar
      static func cyC3EJ1AText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cyC-3E-J1A.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "cyC-3E-J1A.text"
        }

        return NSLocalizedString("cyC-3E-J1A.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: اسم المنتج
      ///
      /// Locales: ar
      static func iWrHRS7RText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iWr-hR-s7R.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "iWr-hR-s7R.text"
        }

        return NSLocalizedString("iWr-hR-s7R.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: اسم المنتج
      ///
      /// Locales: ar
      static func kIQBYG2KText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kIQ-BY-g2K.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kIQ-BY-g2K.text"
        }

        return NSLocalizedString("kIQ-BY-g2K.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: اسم المنتج
      ///
      /// Locales: ar
      static func l2ABhEitText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("L2A-bh-Eit.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "L2A-bh-Eit.text"
        }

        return NSLocalizedString("L2A-bh-Eit.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: اسم المنتج
      ///
      /// Locales: ar
      static func tloZoMd3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tlo-zo-Md3.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Tlo-zo-Md3.text"
        }

        return NSLocalizedString("Tlo-zo-Md3.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: الإجمالى
      ///
      /// Locales: ar
      static func be4MVyaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5BE-4M-Vya.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "5BE-4M-Vya.text"
        }

        return NSLocalizedString("5BE-4M-Vya.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: الإشعارات
      ///
      /// Locales: ar
      static func deFUg4KfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deF-ug-4Kf.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "deF-ug-4Kf.text"
        }

        return NSLocalizedString("deF-ug-4Kf.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: الإعدادات
      ///
      /// Locales: ar
      static func iN5VNZVeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iN5-vN-ZVe.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "iN5-vN-ZVe.title"
        }

        return NSLocalizedString("iN5-vN-ZVe.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: الاسم الأخير
      ///
      /// Locales: ar
      static func him9HUoIPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Him-9H-UoI.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Him-9H-UoI.placeholder"
        }

        return NSLocalizedString("Him-9H-UoI.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: الاسم الأول
      ///
      /// Locales: ar
      static func fRaWxNKZPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FRa-Wx-NKZ.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "FRa-Wx-NKZ.placeholder"
        }

        return NSLocalizedString("FRa-Wx-NKZ.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: البريد الإلكترونى(إختياري)
      ///
      /// Locales: ar
      static func cAf7VE5NPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CAf-7V-e5N.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CAf-7V-e5N.placeholder"
        }

        return NSLocalizedString("CAf-7V-e5N.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: الخصم
      ///
      /// Locales: ar
      static func uNI92GkTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uNI-92-GkT.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "uNI-92-GkT.text"
        }

        return NSLocalizedString("uNI-92-GkT.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: الرئيسية
      ///
      /// Locales: ar
      static func ypndnEuLTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YPN-DN-euL.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "YPN-DN-euL.title"
        }

        return NSLocalizedString("YPN-DN-euL.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: السعر
      ///
      /// Locales: ar
      static func sXWDAAeuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sXW-DA-Aeu.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "sXW-DA-Aeu.text"
        }

        return NSLocalizedString("sXW-DA-Aeu.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: السعر
      ///
      /// Locales: ar
      static func tdJ9DEYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5td-j9-dEY.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "5td-j9-dEY.text"
        }

        return NSLocalizedString("5td-j9-dEY.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: السعر
      ///
      /// Locales: ar
      static func vUjFgD7FText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vUj-Fg-d7F.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "vUj-Fg-d7F.text"
        }

        return NSLocalizedString("vUj-Fg-d7F.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: السعر
      ///
      /// Locales: ar
      static func y7dEbGXeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("y7d-eb-gXe.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "y7d-eb-gXe.text"
        }

        return NSLocalizedString("y7d-eb-gXe.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: القطعة*
      ///
      /// Locales: ar
      static func hYt3mS4APlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hYt-3m-s4A.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hYt-3m-s4A.placeholder"
        }

        return NSLocalizedString("hYt-3m-s4A.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: القطعة*
      ///
      /// Locales: ar
      static func nviUmR4rPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NVI-um-R4r.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NVI-um-R4r.placeholder"
        }

        return NSLocalizedString("NVI-um-R4r.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: القطعة*
      ///
      /// Locales: ar
      static func p3O4NRzTPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("P3O-4N-rzT.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "P3O-4N-rzT.placeholder"
        }

        return NSLocalizedString("P3O-4N-rzT.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: الكمية: ٢
      ///
      /// Locales: ar
      static func czeRhBHCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cze-Rh-BHC.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Cze-Rh-BHC.text"
        }

        return NSLocalizedString("Cze-Rh-BHC.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: الكمية: ٢
      ///
      /// Locales: ar
      static func ggVZhQooText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GgV-Zh-Qoo.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "GgV-Zh-Qoo.text"
        }

        return NSLocalizedString("GgV-Zh-Qoo.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: المتاجر
      ///
      /// Locales: ar
      static func dfqGuX2yNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DFQ-gu-x2y.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "DFQ-gu-x2y.normalTitle"
        }

        return NSLocalizedString("DFQ-gu-x2y.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: المتاجر
      ///
      /// Locales: ar
      static func lwVIAPuYTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LwV-iA-PuY.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "LwV-iA-PuY.title"
        }

        return NSLocalizedString("LwV-iA-PuY.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: المفضلة
      ///
      /// Locales: ar
      static func jsdQb3zSText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JSD-Qb-3zS.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "JSD-Qb-3zS.text"
        }

        return NSLocalizedString("JSD-Qb-3zS.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: المنتجات
      ///
      /// Locales: ar
      static func l452zNKYNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("l45-2z-NKY.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "l45-2z-NKY.normalTitle"
        }

        return NSLocalizedString("l45-2z-NKY.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: المنتجات: ٢
      ///
      /// Locales: ar
      static func kgrCtXW2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kgr-Ct-xW2.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Kgr-Ct-xW2.text"
        }

        return NSLocalizedString("Kgr-Ct-xW2.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: المنطقة*
      ///
      /// Locales: ar
      static func ffcXUPudPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ffc-xU-pud.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Ffc-xU-pud.placeholder"
        }

        return NSLocalizedString("Ffc-xU-pud.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: المنطقة*
      ///
      /// Locales: ar
      static func lk2D8DMuPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lk2-D8-dMu.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lk2-D8-dMu.placeholder"
        }

        return NSLocalizedString("lk2-D8-dMu.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: المنطقة*
      ///
      /// Locales: ar
      static func s18M2Q09Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("S18-m2-Q09.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "S18-m2-Q09.placeholder"
        }

        return NSLocalizedString("S18-m2-Q09.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تأكيد كلمة المرور
      ///
      /// Locales: ar
      static func qnr4vPU3Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QNR-4v-pU3.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "QNR-4v-pU3.placeholder"
        }

        return NSLocalizedString("QNR-4v-pU3.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تاريخ التوصيل
      ///
      /// Locales: ar
      static func izaLpT0eText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IZA-lp-T0e.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "IZA-lp-T0e.text"
        }

        return NSLocalizedString("IZA-lp-T0e.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تاريخ الطلب
      ///
      /// Locales: ar
      static func vwtPUFoOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vwt-PU-foO.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "vwt-PU-foO.text"
        }

        return NSLocalizedString("vwt-PU-foO.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تاريخ الطلب
      ///
      /// Locales: ar
      static func ypZNKPm5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YpZ-nK-Pm5.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "YpZ-nK-Pm5.text"
        }

        return NSLocalizedString("YpZ-nK-Pm5.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تسجيل الخروج
      ///
      /// Locales: ar
      static func i50GLGYzNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("I50-gL-gYz.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "I50-gL-gYz.normalTitle"
        }

        return NSLocalizedString("I50-gL-gYz.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تسجيل الدخول
      ///
      /// Locales: ar
      static func cPtXNDqzNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cPt-xN-dqz.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "cPt-xN-dqz.normalTitle"
        }

        return NSLocalizedString("cPt-xN-dqz.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تصفية حسب
      ///
      /// Locales: ar
      static func ah0BTX9KText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AH0-BT-x9K.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "AH0-BT-x9K.text"
        }

        return NSLocalizedString("AH0-BT-x9K.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تطبيق
      ///
      /// Locales: ar
      static func f9gX027qNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("f9g-X0-27q.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "f9g-X0-27q.normalTitle"
        }

        return NSLocalizedString("f9g-X0-27q.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تطبيق
      ///
      /// Locales: ar
      static func xZFQ7DyPNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xZF-q7-DyP.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xZF-q7-DyP.normalTitle"
        }

        return NSLocalizedString("xZF-q7-DyP.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تعديل
      ///
      /// Locales: ar
      static func aAuNwDbhNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aAu-Nw-dbh.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aAu-Nw-dbh.normalTitle"
        }

        return NSLocalizedString("aAu-Nw-dbh.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تعديل
      ///
      /// Locales: ar
      static func y9XO6XeDNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Y9X-O6-XeD.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Y9X-O6-XeD.normalTitle"
        }

        return NSLocalizedString("Y9X-O6-XeD.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تعديل العنوان
      ///
      /// Locales: ar
      static func dtKvGz7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4DT-Kv-Gz7.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4DT-Kv-Gz7.text"
        }

        return NSLocalizedString("4DT-Kv-Gz7.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تعديل حسابى
      ///
      /// Locales: ar
      static func pkz52ThyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pkz-52-thy.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Pkz-52-thy.text"
        }

        return NSLocalizedString("Pkz-52-thy.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تعديل عنوان
      ///
      /// Locales: ar
      static func tGmNKJyGNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tGm-nK-jyG.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "tGm-nK-jyG.normalTitle"
        }

        return NSLocalizedString("tGm-nK-jyG.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تغيير كلمة المرور
      ///
      /// Locales: ar
      static func on9HHTAzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ON9-hH-tAz.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ON9-hH-tAz.text"
        }

        return NSLocalizedString("ON9-hH-tAz.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تغيير كلمة المرور
      ///
      /// Locales: ar
      static func uh3VcWhWNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UH3-vc-whW.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "UH3-vc-whW.normalTitle"
        }

        return NSLocalizedString("UH3-vc-whW.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تفاصيل الدفع
      ///
      /// Locales: ar
      static func dmNTdUiaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DmN-Td-Uia.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "DmN-Td-Uia.text"
        }

        return NSLocalizedString("DmN-Td-Uia.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تفاصيل الطلب
      ///
      /// Locales: ar
      static func ipnOKMrxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ipn-OK-Mrx.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ipn-OK-Mrx.text"
        }

        return NSLocalizedString("ipn-OK-Mrx.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تم التوصيل
      ///
      /// Locales: ar
      static func aqpFaQZ3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AQP-Fa-QZ3.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "AQP-Fa-QZ3.text"
        }

        return NSLocalizedString("AQP-Fa-QZ3.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تم التوصيل
      ///
      /// Locales: ar
      static func q2sCVyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("10Q-2s-CVy.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "10Q-2s-CVy.text"
        }

        return NSLocalizedString("10Q-2s-CVy.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تم تعديل كلمة المرور بنجاح
      ///
      /// Locales: ar
      static func aL7WMDRuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aL7-WM-dRu.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aL7-WM-dRu.text"
        }

        return NSLocalizedString("aL7-WM-dRu.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: تم تغيير كلمة المرور
      ///
      /// Locales: ar
      static func buLhQhPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5BU-Lh-qhP.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "5BU-Lh-qhP.text"
        }

        return NSLocalizedString("5BU-Lh-qhP.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: حسابى
      ///
      /// Locales: ar
      static func kfYXQKlhTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kfY-XQ-Klh.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kfY-XQ-Klh.title"
        }

        return NSLocalizedString("kfY-XQ-Klh.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: د.ك
      ///
      /// Locales: ar
      static func pmhtdf42Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PMH-tD-f42.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "PMH-tD-f42.text"
        }

        return NSLocalizedString("PMH-tD-f42.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رتب حسب
      ///
      /// Locales: ar
      static func trKWgHaQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("trK-Wg-HaQ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "trK-Wg-HaQ.text"
        }

        return NSLocalizedString("trK-Wg-HaQ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رسوم التوصيل
      ///
      /// Locales: ar
      static func nhyXeDvrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NHY-xe-dvr.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NHY-xe-dvr.text"
        }

        return NSLocalizedString("NHY-xe-dvr.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الدفع
      ///
      /// Locales: ar
      static func nTf2cXMmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NTf-2c-xMm.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NTf-2c-xMm.text"
        }

        return NSLocalizedString("NTf-2c-xMm.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الشارع*
      ///
      /// Locales: ar
      static func dcPZJPSHPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dcP-ZJ-pSH.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "dcP-ZJ-pSH.placeholder"
        }

        return NSLocalizedString("dcP-ZJ-pSH.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الشارع*
      ///
      /// Locales: ar
      static func yagPdzPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("20Y-aG-pdz.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "20Y-aG-pdz.placeholder"
        }

        return NSLocalizedString("20Y-aG-pdz.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الشارع*
      ///
      /// Locales: ar
      static func zuuzqYeWPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZUU-ZQ-YeW.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ZUU-ZQ-YeW.placeholder"
        }

        return NSLocalizedString("ZUU-ZQ-YeW.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الشقة
      ///
      /// Locales: ar
      static func kRqOqF0iPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KRq-Oq-F0i.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "KRq-Oq-F0i.placeholder"
        }

        return NSLocalizedString("KRq-Oq-F0i.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الشقة
      ///
      /// Locales: ar
      static func s00DCuvPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8S0-0D-cuv.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8S0-0D-cuv.placeholder"
        }

        return NSLocalizedString("8S0-0D-cuv.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الشقة
      ///
      /// Locales: ar
      static func yeQHdWwbPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yeQ-Hd-Wwb.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yeQ-Hd-Wwb.placeholder"
        }

        return NSLocalizedString("yeQ-Hd-Wwb.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الطابق
      ///
      /// Locales: ar
      static func i1EZYpvPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8I1-EZ-Ypv.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8I1-EZ-Ypv.placeholder"
        }

        return NSLocalizedString("8I1-EZ-Ypv.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الطابق
      ///
      /// Locales: ar
      static func qYlZBQXEPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qYl-zB-QXE.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qYl-zB-QXE.placeholder"
        }

        return NSLocalizedString("qYl-zB-QXE.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الطابق
      ///
      /// Locales: ar
      static func sgKYrXAWPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sgK-Yr-XAW.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "sgK-Yr-XAW.placeholder"
        }

        return NSLocalizedString("sgK-Yr-XAW.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الطلب
      ///
      /// Locales: ar
      static func bFJUYQ0JText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bFJ-uY-Q0J.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bFJ-uY-Q0J.text"
        }

        return NSLocalizedString("bFJ-uY-Q0J.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الطلب
      ///
      /// Locales: ar
      static func qt9IuZOGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qt9-Iu-ZOG.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qt9-Iu-ZOG.text"
        }

        return NSLocalizedString("qt9-Iu-ZOG.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رقم المبنى*
      ///
      /// Locales: ar
      static func alTwMbdPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5Al-tw-Mbd.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "5Al-tw-Mbd.placeholder"
        }

        return NSLocalizedString("5Al-tw-Mbd.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رقم المبنى*
      ///
      /// Locales: ar
      static func c6gPxBtsPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("C6g-px-bts.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "C6g-px-bts.placeholder"
        }

        return NSLocalizedString("C6g-px-bts.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رقم المبنى*
      ///
      /// Locales: ar
      static func f5gXNIrKPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("F5g-XN-IrK.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "F5g-XN-IrK.placeholder"
        }

        return NSLocalizedString("F5g-XN-IrK.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رقم المعاملة
      ///
      /// Locales: ar
      static func g6QGOWcOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("g6Q-GO-WcO.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "g6Q-GO-WcO.text"
        }

        return NSLocalizedString("g6Q-GO-WcO.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الهاتف
      ///
      /// Locales: ar
      static func j0PVoA3ePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("j0P-vo-a3e.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "j0P-vo-a3e.placeholder"
        }

        return NSLocalizedString("j0P-vo-a3e.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الهاتف*
      ///
      /// Locales: ar
      static func aiKHnVGcPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AiK-hn-VGc.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "AiK-hn-VGc.placeholder"
        }

        return NSLocalizedString("AiK-hn-VGc.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: صناديقنا
      ///
      /// Locales: ar
      static func hURRLEe8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hUR-RL-ee8.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hUR-RL-ee8.text"
        }

        return NSLocalizedString("hUR-RL-ee8.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: صناديقنا
      ///
      /// Locales: ar
      static func n9XHwKxrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("N9X-hw-kxr.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "N9X-hw-kxr.text"
        }

        return NSLocalizedString("N9X-hw-kxr.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: صندوقى
      ///
      /// Locales: ar
      static func gZuHF6ECTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gZu-HF-6EC.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gZu-HF-6EC.title"
        }

        return NSLocalizedString("gZu-HF-6EC.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: طريقة التوصيل
      ///
      /// Locales: ar
      static func mbYRDOP0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mbY-RD-oP0.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "mbY-RD-oP0.text"
        }

        return NSLocalizedString("mbY-RD-oP0.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: طريقة الدفع
      ///
      /// Locales: ar
      static func vxBnaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("870-VX-Bna.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "870-VX-Bna.text"
        }

        return NSLocalizedString("870-VX-Bna.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: طلب إلغاء
      ///
      /// Locales: ar
      static func nr9JKK3SNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nr9-jK-K3S.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Nr9-jK-K3S.normalTitle"
        }

        return NSLocalizedString("Nr9-jK-K3S.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: طلباتى
      ///
      /// Locales: ar
      static func dfu3eRF7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dfu-3e-RF7.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "dfu-3e-RF7.text"
        }

        return NSLocalizedString("dfu-3e-RF7.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: عرض السلة
      ///
      /// Locales: ar
      static func mrlEw2itNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MRL-ew-2it.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "MRL-ew-2it.normalTitle"
        }

        return NSLocalizedString("MRL-ew-2it.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: عرض السلة
      ///
      /// Locales: ar
      static func pNwW8Y5XNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pNw-w8-y5X.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "pNw-w8-y5X.normalTitle"
        }

        return NSLocalizedString("pNw-w8-y5X.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: عرض الكل
      ///
      /// Locales: ar
      static func lj8jGPrNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6Lj-8j-GPr.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6Lj-8j-GPr.normalTitle"
        }

        return NSLocalizedString("6Lj-8j-GPr.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: عرض الكل
      ///
      /// Locales: ar
      static func ozgYkTh1NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OZG-Yk-th1.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "OZG-Yk-th1.normalTitle"
        }

        return NSLocalizedString("OZG-Yk-th1.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: عناوينى
      ///
      /// Locales: ar
      static func ndsH0Xo0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nds-h0-Xo0.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Nds-h0-Xo0.text"
        }

        return NSLocalizedString("Nds-h0-Xo0.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: عنوان التوصيل
      ///
      /// Locales: ar
      static func oI7H0ZGkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oI7-H0-zGk.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "oI7-H0-zGk.text"
        }

        return NSLocalizedString("oI7-H0-zGk.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: عنوان التوصيل
      ///
      /// Locales: ar
      static func yj6KREENText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yj6-KR-EEN.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yj6-KR-EEN.text"
        }

        return NSLocalizedString("yj6-KR-EEN.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: كلمة المرور الجديدة
      ///
      /// Locales: ar
      static func ufcKoOgWPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ufc-ko-ogW.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Ufc-ko-ogW.placeholder"
        }

        return NSLocalizedString("Ufc-ko-ogW.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: كلمة المرور الحالية
      ///
      /// Locales: ar
      static func itiCZRHXPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Iti-CZ-rHX.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Iti-CZ-rHX.placeholder"
        }

        return NSLocalizedString("Iti-CZ-rHX.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: لا يوجد عناوين متاحة
      ///
      /// Locales: ar
      static func lcb0pWDMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lcb-0p-wDM.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lcb-0p-wDM.text"
        }

        return NSLocalizedString("lcb-0p-wDM.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: لا يوجد عناوين يرجى إضافة عنوان جديد
      ///
      /// Locales: ar
      static func raa3QUB1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Raa-3Q-uB1.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Raa-3Q-uB1.text"
        }

        return NSLocalizedString("Raa-3Q-uB1.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: لحوم
      ///
      /// Locales: ar
      static func aWuDbG4MText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aWu-Db-G4M.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aWu-Db-G4M.text"
        }

        return NSLocalizedString("aWu-Db-G4M.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: لحوم
      ///
      /// Locales: ar
      static func aacLj3xXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Aac-Lj-3xX.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Aac-Lj-3xX.text"
        }

        return NSLocalizedString("Aac-Lj-3xX.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: لحوم
      ///
      /// Locales: ar
      static func omyXdWJUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("omy-xd-WJU.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "omy-xd-WJU.text"
        }

        return NSLocalizedString("omy-xd-WJU.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: معاد التوصيل
      ///
      /// Locales: ar
      static func goINVZs9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GoI-NV-Zs9.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "GoI-NV-Zs9.text"
        }

        return NSLocalizedString("GoI-NV-Zs9.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: ملخص الطلب
      ///
      /// Locales: ar
      static func zAj8wFlZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZAj-8w-FlZ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ZAj-8w-FlZ.text"
        }

        return NSLocalizedString("ZAj-8w-FlZ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: •
      ///
      /// Locales: ar
      static func kw2NqBpyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kw2-Nq-bpy.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Kw2-Nq-bpy.text"
        }

        return NSLocalizedString("Kw2-Nq-bpy.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ar translation: •
      ///
      /// Locales: ar
      static func x27lT4RText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1x2-7l-t4R.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "1x2-7l-t4R.text"
        }

        return NSLocalizedString("1x2-7l-t4R.text", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.offers` struct is generated, and contains static references to 16 localization keys.
    struct offers {
      /// ar translation: 
      ///
      /// Locales: ar
      static let f4z9SZpzText = Rswift.StringResource(key: "f4z-9S-Zpz.text", tableName: "Offers", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let itv3uVaIText = Rswift.StringResource(key: "Itv-3u-VaI.text", tableName: "Offers", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let m1eKhCdxText = Rswift.StringResource(key: "m1e-Kh-Cdx.text", tableName: "Offers", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let m3hMxJhSText = Rswift.StringResource(key: "M3h-Mx-jhS.text", tableName: "Offers", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let q1vZTOa6Text = Rswift.StringResource(key: "Q1v-zT-Oa6.text", tableName: "Offers", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let thnZKW4nText = Rswift.StringResource(key: "thn-ZK-w4n.text", tableName: "Offers", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let ub5JTUHRText = Rswift.StringResource(key: "Ub5-jT-UHR.text", tableName: "Offers", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let zb5IlZAJText = Rswift.StringResource(key: "ZB5-il-zAJ.text", tableName: "Offers", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 1
      ///
      /// Locales: ar
      static let iGjG73f2Text = Rswift.StringResource(key: "iGj-g7-3f2.text", tableName: "Offers", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 1
      ///
      /// Locales: ar
      static let uOS3fKzyText = Rswift.StringResource(key: "uOS-3f-Kzy.text", tableName: "Offers", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 1
      ///
      /// Locales: ar
      static let wjmTE953Text = Rswift.StringResource(key: "wjm-TE-953.text", tableName: "Offers", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أضف الى السلة
      ///
      /// Locales: ar
      static let tvlYDBBSNormalTitle = Rswift.StringResource(key: "tvl-YD-bBS.normalTitle", tableName: "Offers", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: أكتب هنا
      ///
      /// Locales: ar
      static let knIKCjgPlaceholder = Rswift.StringResource(key: "4Kn-IK-cjg.placeholder", tableName: "Offers", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اشخاص
      ///
      /// Locales: ar
      static let fqjOZXoNText = Rswift.StringResource(key: "fqj-oZ-XoN.text", tableName: "Offers", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اشخاص .
      ///
      /// Locales: ar
      static let euAWJDuuText = Rswift.StringResource(key: "EuA-wJ-Duu.text", tableName: "Offers", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: نتيجة
      ///
      /// Locales: ar
      static let fBiGbZf0Text = Rswift.StringResource(key: "FBi-gb-zf0.text", tableName: "Offers", bundle: R.hostingBundle, locales: ["ar"], comment: nil)

      /// ar translation: 
      ///
      /// Locales: ar
      static func f4z9SZpzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("f4z-9S-Zpz.text", tableName: "Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Offers", preferredLanguages: preferredLanguages) else {
          return "f4z-9S-Zpz.text"
        }

        return NSLocalizedString("f4z-9S-Zpz.text", tableName: "Offers", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func itv3uVaIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Itv-3u-VaI.text", tableName: "Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Offers", preferredLanguages: preferredLanguages) else {
          return "Itv-3u-VaI.text"
        }

        return NSLocalizedString("Itv-3u-VaI.text", tableName: "Offers", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func m1eKhCdxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m1e-Kh-Cdx.text", tableName: "Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Offers", preferredLanguages: preferredLanguages) else {
          return "m1e-Kh-Cdx.text"
        }

        return NSLocalizedString("m1e-Kh-Cdx.text", tableName: "Offers", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func m3hMxJhSText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("M3h-Mx-jhS.text", tableName: "Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Offers", preferredLanguages: preferredLanguages) else {
          return "M3h-Mx-jhS.text"
        }

        return NSLocalizedString("M3h-Mx-jhS.text", tableName: "Offers", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func q1vZTOa6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Q1v-zT-Oa6.text", tableName: "Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Offers", preferredLanguages: preferredLanguages) else {
          return "Q1v-zT-Oa6.text"
        }

        return NSLocalizedString("Q1v-zT-Oa6.text", tableName: "Offers", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func thnZKW4nText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thn-ZK-w4n.text", tableName: "Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Offers", preferredLanguages: preferredLanguages) else {
          return "thn-ZK-w4n.text"
        }

        return NSLocalizedString("thn-ZK-w4n.text", tableName: "Offers", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func ub5JTUHRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ub5-jT-UHR.text", tableName: "Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Offers", preferredLanguages: preferredLanguages) else {
          return "Ub5-jT-UHR.text"
        }

        return NSLocalizedString("Ub5-jT-UHR.text", tableName: "Offers", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func zb5IlZAJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZB5-il-zAJ.text", tableName: "Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Offers", preferredLanguages: preferredLanguages) else {
          return "ZB5-il-zAJ.text"
        }

        return NSLocalizedString("ZB5-il-zAJ.text", tableName: "Offers", bundle: bundle, comment: "")
      }

      /// ar translation: 1
      ///
      /// Locales: ar
      static func iGjG73f2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iGj-g7-3f2.text", tableName: "Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Offers", preferredLanguages: preferredLanguages) else {
          return "iGj-g7-3f2.text"
        }

        return NSLocalizedString("iGj-g7-3f2.text", tableName: "Offers", bundle: bundle, comment: "")
      }

      /// ar translation: 1
      ///
      /// Locales: ar
      static func uOS3fKzyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uOS-3f-Kzy.text", tableName: "Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Offers", preferredLanguages: preferredLanguages) else {
          return "uOS-3f-Kzy.text"
        }

        return NSLocalizedString("uOS-3f-Kzy.text", tableName: "Offers", bundle: bundle, comment: "")
      }

      /// ar translation: 1
      ///
      /// Locales: ar
      static func wjmTE953Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wjm-TE-953.text", tableName: "Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Offers", preferredLanguages: preferredLanguages) else {
          return "wjm-TE-953.text"
        }

        return NSLocalizedString("wjm-TE-953.text", tableName: "Offers", bundle: bundle, comment: "")
      }

      /// ar translation: أضف الى السلة
      ///
      /// Locales: ar
      static func tvlYDBBSNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tvl-YD-bBS.normalTitle", tableName: "Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Offers", preferredLanguages: preferredLanguages) else {
          return "tvl-YD-bBS.normalTitle"
        }

        return NSLocalizedString("tvl-YD-bBS.normalTitle", tableName: "Offers", bundle: bundle, comment: "")
      }

      /// ar translation: أكتب هنا
      ///
      /// Locales: ar
      static func knIKCjgPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4Kn-IK-cjg.placeholder", tableName: "Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Offers", preferredLanguages: preferredLanguages) else {
          return "4Kn-IK-cjg.placeholder"
        }

        return NSLocalizedString("4Kn-IK-cjg.placeholder", tableName: "Offers", bundle: bundle, comment: "")
      }

      /// ar translation: اشخاص
      ///
      /// Locales: ar
      static func fqjOZXoNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fqj-oZ-XoN.text", tableName: "Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Offers", preferredLanguages: preferredLanguages) else {
          return "fqj-oZ-XoN.text"
        }

        return NSLocalizedString("fqj-oZ-XoN.text", tableName: "Offers", bundle: bundle, comment: "")
      }

      /// ar translation: اشخاص .
      ///
      /// Locales: ar
      static func euAWJDuuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EuA-wJ-Duu.text", tableName: "Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Offers", preferredLanguages: preferredLanguages) else {
          return "EuA-wJ-Duu.text"
        }

        return NSLocalizedString("EuA-wJ-Duu.text", tableName: "Offers", bundle: bundle, comment: "")
      }

      /// ar translation: نتيجة
      ///
      /// Locales: ar
      static func fBiGbZf0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FBi-gb-zf0.text", tableName: "Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Offers", preferredLanguages: preferredLanguages) else {
          return "FBi-gb-zf0.text"
        }

        return NSLocalizedString("FBi-gb-zf0.text", tableName: "Offers", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.settings` struct is generated, and contains static references to 17 localization keys.
    struct settings {
      /// ar translation: 
      ///
      /// Locales: ar
      static let dUtDgWfsText = Rswift.StringResource(key: "dUt-dg-wfs.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let j4KPIltText = Rswift.StringResource(key: "4J4-kP-Ilt.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: ENGLISH
      ///
      /// Locales: ar
      static let sjsAV4ULText = Rswift.StringResource(key: "sjs-aV-4UL.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إرسال
      ///
      /// Locales: ar
      static let igPOYPdnNormalTitle = Rswift.StringResource(key: "igP-OY-Pdn.normalTitle", tableName: "Settings", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اتصل بنا
      ///
      /// Locales: ar
      static let lVxGNRKZText = Rswift.StringResource(key: "LVx-gN-rKZ.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: اتصل بنا
      ///
      /// Locales: ar
      static let pYRXrIsWText = Rswift.StringResource(key: "pYR-xr-IsW.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: ارسل رسالة
      ///
      /// Locales: ar
      static let hg5MfP5NText = Rswift.StringResource(key: "Hg5-Mf-P5N.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الإشعارات
      ///
      /// Locales: ar
      static let dT1r6UoText = Rswift.StringResource(key: "2dT-1r-6Uo.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الإشعارات
      ///
      /// Locales: ar
      static let gKdUrPp3Text = Rswift.StringResource(key: "gKd-Ur-Pp3.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الاسم*
      ///
      /// Locales: ar
      static let qpmRrF0pPlaceholder = Rswift.StringResource(key: "qpm-Rr-F0p.placeholder", tableName: "Settings", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: البريد الإلكترونى*
      ///
      /// Locales: ar
      static let mCp8mRPzPlaceholder = Rswift.StringResource(key: "MCp-8m-rPz.placeholder", tableName: "Settings", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الرسالة
      ///
      /// Locales: ar
      static let lewVp9nKText = Rswift.StringResource(key: "LEW-vp-9nK.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: العربية
      ///
      /// Locales: ar
      static let dcF8tAmPText = Rswift.StringResource(key: "dcF-8t-amP.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تغيير اللغة
      ///
      /// Locales: ar
      static let fs1pHzsText = Rswift.StringResource(key: "8fs-1p-Hzs.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تغيير اللغة
      ///
      /// Locales: ar
      static let wvyZGV4TText = Rswift.StringResource(key: "Wvy-ZG-V4T.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تواصل معنا على الواتساب
      ///
      /// Locales: ar
      static let phHrItWText = Rswift.StringResource(key: "9Ph-hr-itW.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الهاتف*
      ///
      /// Locales: ar
      static let l7jMJ6RnPlaceholder = Rswift.StringResource(key: "l7j-mJ-6Rn.placeholder", tableName: "Settings", bundle: R.hostingBundle, locales: ["ar"], comment: nil)

      /// ar translation: 
      ///
      /// Locales: ar
      static func dUtDgWfsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dUt-dg-wfs.text", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "dUt-dg-wfs.text"
        }

        return NSLocalizedString("dUt-dg-wfs.text", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func j4KPIltText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4J4-kP-Ilt.text", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "4J4-kP-Ilt.text"
        }

        return NSLocalizedString("4J4-kP-Ilt.text", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// ar translation: ENGLISH
      ///
      /// Locales: ar
      static func sjsAV4ULText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sjs-aV-4UL.text", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "sjs-aV-4UL.text"
        }

        return NSLocalizedString("sjs-aV-4UL.text", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// ar translation: إرسال
      ///
      /// Locales: ar
      static func igPOYPdnNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("igP-OY-Pdn.normalTitle", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "igP-OY-Pdn.normalTitle"
        }

        return NSLocalizedString("igP-OY-Pdn.normalTitle", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// ar translation: اتصل بنا
      ///
      /// Locales: ar
      static func lVxGNRKZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LVx-gN-rKZ.text", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "LVx-gN-rKZ.text"
        }

        return NSLocalizedString("LVx-gN-rKZ.text", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// ar translation: اتصل بنا
      ///
      /// Locales: ar
      static func pYRXrIsWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pYR-xr-IsW.text", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "pYR-xr-IsW.text"
        }

        return NSLocalizedString("pYR-xr-IsW.text", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// ar translation: ارسل رسالة
      ///
      /// Locales: ar
      static func hg5MfP5NText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hg5-Mf-P5N.text", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "Hg5-Mf-P5N.text"
        }

        return NSLocalizedString("Hg5-Mf-P5N.text", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// ar translation: الإشعارات
      ///
      /// Locales: ar
      static func dT1r6UoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2dT-1r-6Uo.text", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "2dT-1r-6Uo.text"
        }

        return NSLocalizedString("2dT-1r-6Uo.text", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// ar translation: الإشعارات
      ///
      /// Locales: ar
      static func gKdUrPp3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gKd-Ur-Pp3.text", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "gKd-Ur-Pp3.text"
        }

        return NSLocalizedString("gKd-Ur-Pp3.text", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// ar translation: الاسم*
      ///
      /// Locales: ar
      static func qpmRrF0pPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qpm-Rr-F0p.placeholder", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "qpm-Rr-F0p.placeholder"
        }

        return NSLocalizedString("qpm-Rr-F0p.placeholder", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// ar translation: البريد الإلكترونى*
      ///
      /// Locales: ar
      static func mCp8mRPzPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MCp-8m-rPz.placeholder", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "MCp-8m-rPz.placeholder"
        }

        return NSLocalizedString("MCp-8m-rPz.placeholder", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// ar translation: الرسالة
      ///
      /// Locales: ar
      static func lewVp9nKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LEW-vp-9nK.text", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "LEW-vp-9nK.text"
        }

        return NSLocalizedString("LEW-vp-9nK.text", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// ar translation: العربية
      ///
      /// Locales: ar
      static func dcF8tAmPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dcF-8t-amP.text", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "dcF-8t-amP.text"
        }

        return NSLocalizedString("dcF-8t-amP.text", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// ar translation: تغيير اللغة
      ///
      /// Locales: ar
      static func fs1pHzsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8fs-1p-Hzs.text", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "8fs-1p-Hzs.text"
        }

        return NSLocalizedString("8fs-1p-Hzs.text", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// ar translation: تغيير اللغة
      ///
      /// Locales: ar
      static func wvyZGV4TText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wvy-ZG-V4T.text", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "Wvy-ZG-V4T.text"
        }

        return NSLocalizedString("Wvy-ZG-V4T.text", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// ar translation: تواصل معنا على الواتساب
      ///
      /// Locales: ar
      static func phHrItWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9Ph-hr-itW.text", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "9Ph-hr-itW.text"
        }

        return NSLocalizedString("9Ph-hr-itW.text", tableName: "Settings", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الهاتف*
      ///
      /// Locales: ar
      static func l7jMJ6RnPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("l7j-mJ-6Rn.placeholder", tableName: "Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Settings", preferredLanguages: preferredLanguages) else {
          return "l7j-mJ-6Rn.placeholder"
        }

        return NSLocalizedString("l7j-mJ-6Rn.placeholder", tableName: "Settings", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.wallet` struct is generated, and contains static references to 18 localization keys.
    struct wallet {
      /// ar translation: 
      ///
      /// Locales: ar
      static let n7rVAWPXText = Rswift.StringResource(key: "N7r-vA-WPX.text", tableName: "Wallet", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let xi6EmN7NText = Rswift.StringResource(key: "Xi6-em-n7N.text", tableName: "Wallet", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 
      ///
      /// Locales: ar
      static let xymzpFkText = Rswift.StringResource(key: "5XY-MZ-pFk.text", tableName: "Wallet", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 0.000
      ///
      /// Locales: ar
      static let mW23rEU8Placeholder = Rswift.StringResource(key: "mW2-3r-eU8.placeholder", tableName: "Wallet", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: 0.000 د.ك
      ///
      /// Locales: ar
      static let yPfJbC1kText = Rswift.StringResource(key: "YPf-Jb-C1k.text", tableName: "Wallet", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: إشحن محفظتك
      ///
      /// Locales: ar
      static let pF36QSixText = Rswift.StringResource(key: "pF3-6Q-six.text", tableName: "Wallet", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: الرصيد
      ///
      /// Locales: ar
      static let ieaQzCN8Text = Rswift.StringResource(key: "Iea-Qz-cN8.text", tableName: "Wallet", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: تم الشحن بنجاح
      ///
      /// Locales: ar
      static let lOXIVP97Text = Rswift.StringResource(key: "lOX-IV-P97.text", tableName: "Wallet", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: حاول مرة أخرى
      ///
      /// Locales: ar
      static let pm0StZZ1NormalTitle = Rswift.StringResource(key: "PM0-St-ZZ1.normalTitle", tableName: "Wallet", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: خطأ
      ///
      /// Locales: ar
      static let wLbO3DText = Rswift.StringResource(key: "56w-Lb-O3D.text", tableName: "Wallet", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: د.ك
      ///
      /// Locales: ar
      static let ta1PaDaZText = Rswift.StringResource(key: "TA1-pa-DaZ.text", tableName: "Wallet", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم الدفع
      ///
      /// Locales: ar
      static let rG6DHV6bText = Rswift.StringResource(key: "rG6-DH-v6b.text", tableName: "Wallet", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: رقم المعاملة
      ///
      /// Locales: ar
      static let zWcAt3yoText = Rswift.StringResource(key: "ZWc-at-3yo.text", tableName: "Wallet", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: شحن
      ///
      /// Locales: ar
      static let ht2Mj696NormalTitle = Rswift.StringResource(key: "HT2-Mj-696.normalTitle", tableName: "Wallet", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: شحن
      ///
      /// Locales: ar
      static let x4bAp8R5NormalTitle = Rswift.StringResource(key: "x4b-Ap-8R5.normalTitle", tableName: "Wallet", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: مبلغ الشحن
      ///
      /// Locales: ar
      static let rAmU9UfnText = Rswift.StringResource(key: "rAm-U9-Ufn.text", tableName: "Wallet", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: محفظتى
      ///
      /// Locales: ar
      static let umQH2hENormalTitle = Rswift.StringResource(key: "9um-qH-2hE.normalTitle", tableName: "Wallet", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// ar translation: يرجى المحاولة مرة أخري
      ///
      /// Locales: ar
      static let nTMRsPloText = Rswift.StringResource(key: "nTM-rs-Plo.text", tableName: "Wallet", bundle: R.hostingBundle, locales: ["ar"], comment: nil)

      /// ar translation: 
      ///
      /// Locales: ar
      static func n7rVAWPXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("N7r-vA-WPX.text", tableName: "Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wallet", preferredLanguages: preferredLanguages) else {
          return "N7r-vA-WPX.text"
        }

        return NSLocalizedString("N7r-vA-WPX.text", tableName: "Wallet", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func xi6EmN7NText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Xi6-em-n7N.text", tableName: "Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wallet", preferredLanguages: preferredLanguages) else {
          return "Xi6-em-n7N.text"
        }

        return NSLocalizedString("Xi6-em-n7N.text", tableName: "Wallet", bundle: bundle, comment: "")
      }

      /// ar translation: 
      ///
      /// Locales: ar
      static func xymzpFkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5XY-MZ-pFk.text", tableName: "Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wallet", preferredLanguages: preferredLanguages) else {
          return "5XY-MZ-pFk.text"
        }

        return NSLocalizedString("5XY-MZ-pFk.text", tableName: "Wallet", bundle: bundle, comment: "")
      }

      /// ar translation: 0.000
      ///
      /// Locales: ar
      static func mW23rEU8Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mW2-3r-eU8.placeholder", tableName: "Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wallet", preferredLanguages: preferredLanguages) else {
          return "mW2-3r-eU8.placeholder"
        }

        return NSLocalizedString("mW2-3r-eU8.placeholder", tableName: "Wallet", bundle: bundle, comment: "")
      }

      /// ar translation: 0.000 د.ك
      ///
      /// Locales: ar
      static func yPfJbC1kText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YPf-Jb-C1k.text", tableName: "Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wallet", preferredLanguages: preferredLanguages) else {
          return "YPf-Jb-C1k.text"
        }

        return NSLocalizedString("YPf-Jb-C1k.text", tableName: "Wallet", bundle: bundle, comment: "")
      }

      /// ar translation: إشحن محفظتك
      ///
      /// Locales: ar
      static func pF36QSixText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pF3-6Q-six.text", tableName: "Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wallet", preferredLanguages: preferredLanguages) else {
          return "pF3-6Q-six.text"
        }

        return NSLocalizedString("pF3-6Q-six.text", tableName: "Wallet", bundle: bundle, comment: "")
      }

      /// ar translation: الرصيد
      ///
      /// Locales: ar
      static func ieaQzCN8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Iea-Qz-cN8.text", tableName: "Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wallet", preferredLanguages: preferredLanguages) else {
          return "Iea-Qz-cN8.text"
        }

        return NSLocalizedString("Iea-Qz-cN8.text", tableName: "Wallet", bundle: bundle, comment: "")
      }

      /// ar translation: تم الشحن بنجاح
      ///
      /// Locales: ar
      static func lOXIVP97Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lOX-IV-P97.text", tableName: "Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wallet", preferredLanguages: preferredLanguages) else {
          return "lOX-IV-P97.text"
        }

        return NSLocalizedString("lOX-IV-P97.text", tableName: "Wallet", bundle: bundle, comment: "")
      }

      /// ar translation: حاول مرة أخرى
      ///
      /// Locales: ar
      static func pm0StZZ1NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PM0-St-ZZ1.normalTitle", tableName: "Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wallet", preferredLanguages: preferredLanguages) else {
          return "PM0-St-ZZ1.normalTitle"
        }

        return NSLocalizedString("PM0-St-ZZ1.normalTitle", tableName: "Wallet", bundle: bundle, comment: "")
      }

      /// ar translation: خطأ
      ///
      /// Locales: ar
      static func wLbO3DText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("56w-Lb-O3D.text", tableName: "Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wallet", preferredLanguages: preferredLanguages) else {
          return "56w-Lb-O3D.text"
        }

        return NSLocalizedString("56w-Lb-O3D.text", tableName: "Wallet", bundle: bundle, comment: "")
      }

      /// ar translation: د.ك
      ///
      /// Locales: ar
      static func ta1PaDaZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TA1-pa-DaZ.text", tableName: "Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wallet", preferredLanguages: preferredLanguages) else {
          return "TA1-pa-DaZ.text"
        }

        return NSLocalizedString("TA1-pa-DaZ.text", tableName: "Wallet", bundle: bundle, comment: "")
      }

      /// ar translation: رقم الدفع
      ///
      /// Locales: ar
      static func rG6DHV6bText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rG6-DH-v6b.text", tableName: "Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wallet", preferredLanguages: preferredLanguages) else {
          return "rG6-DH-v6b.text"
        }

        return NSLocalizedString("rG6-DH-v6b.text", tableName: "Wallet", bundle: bundle, comment: "")
      }

      /// ar translation: رقم المعاملة
      ///
      /// Locales: ar
      static func zWcAt3yoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZWc-at-3yo.text", tableName: "Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wallet", preferredLanguages: preferredLanguages) else {
          return "ZWc-at-3yo.text"
        }

        return NSLocalizedString("ZWc-at-3yo.text", tableName: "Wallet", bundle: bundle, comment: "")
      }

      /// ar translation: شحن
      ///
      /// Locales: ar
      static func ht2Mj696NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HT2-Mj-696.normalTitle", tableName: "Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wallet", preferredLanguages: preferredLanguages) else {
          return "HT2-Mj-696.normalTitle"
        }

        return NSLocalizedString("HT2-Mj-696.normalTitle", tableName: "Wallet", bundle: bundle, comment: "")
      }

      /// ar translation: شحن
      ///
      /// Locales: ar
      static func x4bAp8R5NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("x4b-Ap-8R5.normalTitle", tableName: "Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wallet", preferredLanguages: preferredLanguages) else {
          return "x4b-Ap-8R5.normalTitle"
        }

        return NSLocalizedString("x4b-Ap-8R5.normalTitle", tableName: "Wallet", bundle: bundle, comment: "")
      }

      /// ar translation: مبلغ الشحن
      ///
      /// Locales: ar
      static func rAmU9UfnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rAm-U9-Ufn.text", tableName: "Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wallet", preferredLanguages: preferredLanguages) else {
          return "rAm-U9-Ufn.text"
        }

        return NSLocalizedString("rAm-U9-Ufn.text", tableName: "Wallet", bundle: bundle, comment: "")
      }

      /// ar translation: محفظتى
      ///
      /// Locales: ar
      static func umQH2hENormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9um-qH-2hE.normalTitle", tableName: "Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wallet", preferredLanguages: preferredLanguages) else {
          return "9um-qH-2hE.normalTitle"
        }

        return NSLocalizedString("9um-qH-2hE.normalTitle", tableName: "Wallet", bundle: bundle, comment: "")
      }

      /// ar translation: يرجى المحاولة مرة أخري
      ///
      /// Locales: ar
      static func nTMRsPloText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nTM-rs-Plo.text", tableName: "Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Wallet", preferredLanguages: preferredLanguages) else {
          return "nTM-rs-Plo.text"
        }

        return NSLocalizedString("nTM-rs-Plo.text", tableName: "Wallet", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _SelctTypeTableViewCell.validate()
    }

    struct _DaysCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DaysCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "DaysCollectionViewCell"
      let name = "DaysCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DaysCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DaysCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _SelctTypeTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SelctTypeTableViewCell

      let bundle = R.hostingBundle
      let identifier = "SelctTypeTableViewCell"
      let name = "SelctTypeTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelctTypeTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelctTypeTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "n-seleectRadio", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'n-seleectRadio' is used in nib 'SelctTypeTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Meatz-Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Red' is used in nib 'SelctTypeTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _TimesCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TimesCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "TimesCollectionViewCell"
      let name = "TimesCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TimesCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TimesCollectionViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try auth.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try boxes.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try cart.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try checkout.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try intro.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try offers.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try settings.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try wallet.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct auth: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let forgotPassView = StoryboardViewControllerResource<ForgotPassView>(identifier: "ForgotPassView")
      let loginView = StoryboardViewControllerResource<LoginView>(identifier: "LoginView")
      let name = "Auth"
      let registerView = StoryboardViewControllerResource<RegisterView>(identifier: "RegisterView")

      func forgotPassView(_: Void = ()) -> ForgotPassView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPassView)
      }

      func loginView(_: Void = ()) -> LoginView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginView)
      }

      func registerView(_: Void = ()) -> RegisterView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerView)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Icon material-check-box-outline-blank", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon material-check-box-outline-blank' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Lang-selection-bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Lang-selection-bg' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "apple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'apple' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "email", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'email' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebook' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'google' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "introLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'introLogo' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "password", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'password' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "telephone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'telephone' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'Auth', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Maetz-Light-Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Maetz-Light-Red' is used in storyboard 'Auth', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Black' is used in storyboard 'Auth', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Red' is used in storyboard 'Auth', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-bg' is used in storyboard 'Auth', but couldn't be loaded.") }
        }
        if _R.storyboard.auth().forgotPassView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPassView' could not be loaded from storyboard 'Auth' as 'ForgotPassView'.") }
        if _R.storyboard.auth().loginView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginView' could not be loaded from storyboard 'Auth' as 'LoginView'.") }
        if _R.storyboard.auth().registerView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerView' could not be loaded from storyboard 'Auth' as 'RegisterView'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct boxes: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addBoxView = StoryboardViewControllerResource<AddBoxView>(identifier: "AddBoxView")
      let boxProductsView = StoryboardViewControllerResource<BoxProductsView>(identifier: "BoxProductsView")
      let bundle = R.hostingBundle
      let loginFirstAlertController = StoryboardViewControllerResource<LoginFirstAlertController>(identifier: "LoginFirstAlertController")
      let myBoxesView = StoryboardViewControllerResource<MyBoxesView>(identifier: "MyBoxesView")
      let name = "Boxes"
      let noBoxesController = StoryboardViewControllerResource<NoBoxesController>(identifier: "NoBoxesController")

      func addBoxView(_: Void = ()) -> AddBoxView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addBoxView)
      }

      func boxProductsView(_: Void = ()) -> BoxProductsView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: boxProductsView)
      }

      func loginFirstAlertController(_: Void = ()) -> LoginFirstAlertController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginFirstAlertController)
      }

      func myBoxesView(_: Void = ()) -> MyBoxesView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myBoxesView)
      }

      func noBoxesController(_: Void = ()) -> NoBoxesController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: noBoxesController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Icon open-plus1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon open-plus1' is used in storyboard 'Boxes', but couldn't be loaded.") }
        if UIKit.UIImage(named: "guestUser", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'guestUser' is used in storyboard 'Boxes', but couldn't be loaded.") }
        if UIKit.UIImage(named: "noAddress", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'noAddress' is used in storyboard 'Boxes', but couldn't be loaded.") }
        if UIKit.UIImage(named: "trash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'trash' is used in storyboard 'Boxes', but couldn't be loaded.") }
        if UIKit.UIImage(named: "warning", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'warning' is used in storyboard 'Boxes', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Maetz-Light-Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Maetz-Light-Red' is used in storyboard 'Boxes', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Black' is used in storyboard 'Boxes', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Gradient", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Gradient' is used in storyboard 'Boxes', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Red' is used in storyboard 'Boxes', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-bg' is used in storyboard 'Boxes', but couldn't be loaded.") }
        }
        if _R.storyboard.boxes().addBoxView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addBoxView' could not be loaded from storyboard 'Boxes' as 'AddBoxView'.") }
        if _R.storyboard.boxes().boxProductsView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'boxProductsView' could not be loaded from storyboard 'Boxes' as 'BoxProductsView'.") }
        if _R.storyboard.boxes().loginFirstAlertController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginFirstAlertController' could not be loaded from storyboard 'Boxes' as 'LoginFirstAlertController'.") }
        if _R.storyboard.boxes().myBoxesView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myBoxesView' could not be loaded from storyboard 'Boxes' as 'MyBoxesView'.") }
        if _R.storyboard.boxes().noBoxesController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'noBoxesController' could not be loaded from storyboard 'Boxes' as 'NoBoxesController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct cart: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let cartController = StoryboardViewControllerResource<CartController>(identifier: "CartController")
      let editProfileWithPhoneController = StoryboardViewControllerResource<EditProfileWithPhoneController>(identifier: "EditProfileWithPhoneController")
      let guestAlertController = StoryboardViewControllerResource<GuestAlertController>(identifier: "GuestAlertController")
      let name = "Cart"

      func cartController(_: Void = ()) -> CartController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cartController)
      }

      func editProfileWithPhoneController(_: Void = ()) -> EditProfileWithPhoneController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileWithPhoneController)
      }

      func guestAlertController(_: Void = ()) -> GuestAlertController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: guestAlertController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Icon awesome-minus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon awesome-minus' is used in storyboard 'Cart', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Icon open-plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon open-plus' is used in storyboard 'Cart', but couldn't be loaded.") }
        if UIKit.UIImage(named: "trash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'trash' is used in storyboard 'Cart', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Maetz-Light-Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Maetz-Light-Red' is used in storyboard 'Cart', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Black' is used in storyboard 'Cart', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Gradient", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Gradient' is used in storyboard 'Cart', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Red' is used in storyboard 'Cart', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-bg' is used in storyboard 'Cart', but couldn't be loaded.") }
        }
        if _R.storyboard.cart().cartController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cartController' could not be loaded from storyboard 'Cart' as 'CartController'.") }
        if _R.storyboard.cart().editProfileWithPhoneController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileWithPhoneController' could not be loaded from storyboard 'Cart' as 'EditProfileWithPhoneController'.") }
        if _R.storyboard.cart().guestAlertController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'guestAlertController' could not be loaded from storyboard 'Cart' as 'GuestAlertController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct checkout: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let checkoutView = StoryboardViewControllerResource<CheckoutView>(identifier: "CheckoutView")
      let name = "Checkout"
      let orderErrorView = StoryboardViewControllerResource<OrderErrorView>(identifier: "OrderErrorView")
      let orderSuccessView = StoryboardViewControllerResource<OrderSuccessView>(identifier: "OrderSuccessView")
      let paymentView = StoryboardViewControllerResource<PaymentView>(identifier: "PaymentView")
      let updateCheckoutViewController = StoryboardViewControllerResource<UpdateCheckoutViewController>(identifier: "UpdateCheckoutViewController")

      func checkoutView(_: Void = ()) -> CheckoutView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: checkoutView)
      }

      func orderErrorView(_: Void = ()) -> OrderErrorView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderErrorView)
      }

      func orderSuccessView(_: Void = ()) -> OrderSuccessView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderSuccessView)
      }

      func paymentView(_: Void = ()) -> PaymentView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentView)
      }

      func updateCheckoutViewController(_: Void = ()) -> UpdateCheckoutViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: updateCheckoutViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "imageView:1YL-cI-MBt:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:1YL-cI-MBt:image' is used in storyboard 'Checkout', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageView:EAJ-dL-3Q9:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:EAJ-dL-3Q9:image' is used in storyboard 'Checkout', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageView:d1f-7s-Xf7:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:d1f-7s-Xf7:image' is used in storyboard 'Checkout', but couldn't be loaded.") }
        if UIKit.UIImage(named: "infoIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'infoIcon' is used in storyboard 'Checkout', but couldn't be loaded.") }
        if UIKit.UIImage(named: "introLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'introLogo' is used in storyboard 'Checkout', but couldn't be loaded.") }
        if UIKit.UIImage(named: "orderError", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'orderError' is used in storyboard 'Checkout', but couldn't be loaded.") }
        if UIKit.UIImage(named: "orderSuccess", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'orderSuccess' is used in storyboard 'Checkout', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus-sign-in-circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus-sign-in-circle' is used in storyboard 'Checkout', but couldn't be loaded.") }
        if UIKit.UIImage(named: "promo-applied", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'promo-applied' is used in storyboard 'Checkout', but couldn't be loaded.") }
        if UIKit.UIImage(named: "rocket", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rocket' is used in storyboard 'Checkout', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Maetz-Light-Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Maetz-Light-Red' is used in storyboard 'Checkout', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Black' is used in storyboard 'Checkout', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Gradient", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Gradient' is used in storyboard 'Checkout', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Red' is used in storyboard 'Checkout', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-bg' is used in storyboard 'Checkout', but couldn't be loaded.") }
        }
        if _R.storyboard.checkout().checkoutView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'checkoutView' could not be loaded from storyboard 'Checkout' as 'CheckoutView'.") }
        if _R.storyboard.checkout().orderErrorView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderErrorView' could not be loaded from storyboard 'Checkout' as 'OrderErrorView'.") }
        if _R.storyboard.checkout().orderSuccessView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderSuccessView' could not be loaded from storyboard 'Checkout' as 'OrderSuccessView'.") }
        if _R.storyboard.checkout().paymentView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentView' could not be loaded from storyboard 'Checkout' as 'PaymentView'.") }
        if _R.storyboard.checkout().updateCheckoutViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'updateCheckoutViewController' could not be loaded from storyboard 'Checkout' as 'UpdateCheckoutViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct intro: Rswift.StoryboardResourceType, Rswift.Validatable {
      let adsView = StoryboardViewControllerResource<AdsView>(identifier: "AdsView")
      let bundle = R.hostingBundle
      let chooseLangView = StoryboardViewControllerResource<ChooseLangView>(identifier: "ChooseLangView")
      let name = "Intro"

      func adsView(_: Void = ()) -> AdsView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: adsView)
      }

      func chooseLangView(_: Void = ()) -> ChooseLangView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chooseLangView)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Lang-selection-bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Lang-selection-bg' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "introLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'introLogo' is used in storyboard 'Intro', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Maetz-Light-Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Maetz-Light-Red' is used in storyboard 'Intro', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Red' is used in storyboard 'Intro', but couldn't be loaded.") }
        }
        if _R.storyboard.intro().adsView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'adsView' could not be loaded from storyboard 'Intro' as 'AdsView'.") }
        if _R.storyboard.intro().chooseLangView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chooseLangView' could not be loaded from storyboard 'Intro' as 'ChooseLangView'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "Splash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Splash' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addAddressView = StoryboardViewControllerResource<AddAddressView>(identifier: "AddAddressView")
      let addToBoxesView = StoryboardViewControllerResource<AddToBoxesView>(identifier: "AddToBoxesView")
      let areasView = StoryboardViewControllerResource<AreasView>(identifier: "AreasView")
      let boxDetailsView = StoryboardViewControllerResource<BoxDetailsView>(identifier: "BoxDetailsView")
      let bundle = R.hostingBundle
      let categoryDetailsView = StoryboardViewControllerResource<CategoryDetailsView>(identifier: "CategoryDetailsView")
      let changePassAlertController = StoryboardViewControllerResource<ChangePassAlertController>(identifier: "ChangePassAlertController")
      let changePassView = StoryboardViewControllerResource<ChangePassView>(identifier: "ChangePassView")
      let deliveryAddressView = StoryboardViewControllerResource<DeliveryAddressView>(identifier: "DeliveryAddressView")
      let editAddressView = StoryboardViewControllerResource<EditAddressView>(identifier: "EditAddressView")
      let editProfileView = StoryboardViewControllerResource<EditProfileView>(identifier: "EditProfileView")
      let featuredView = StoryboardViewControllerResource<FeaturedView>(identifier: "FeaturedView")
      let filterByView = StoryboardViewControllerResource<FilterByView>(identifier: "FilterByView")
      let homeView = StoryboardViewControllerResource<HomeView>(identifier: "HomeView")
      let mainTabBarController = StoryboardViewControllerResource<MainTabBarController>(identifier: "MainTabBarController")
      let myAddressView = StoryboardViewControllerResource<MyAddressView>(identifier: "MyAddressView")
      let myOrdersView = StoryboardViewControllerResource<MyOrdersView>(identifier: "MyOrdersView")
      let name = "Main"
      let notificationsView = StoryboardViewControllerResource<NotificationsView>(identifier: "NotificationsView")
      let orderDetailsView = StoryboardViewControllerResource<OrderDetailsView>(identifier: "OrderDetailsView")
      let ourBoxesView = StoryboardViewControllerResource<OurBoxesView>(identifier: "OurBoxesView")
      let productDetailsView = StoryboardViewControllerResource<ProductDetailsView>(identifier: "ProductDetailsView")
      let profileView = StoryboardViewControllerResource<ProfileView>(identifier: "ProfileView")
      let searchResultView = StoryboardViewControllerResource<SearchResultView>(identifier: "SearchResultView")
      let searchView = StoryboardViewControllerResource<SearchView>(identifier: "SearchView")
      let shopDetailsView = StoryboardViewControllerResource<ShopDetailsView>(identifier: "ShopDetailsView")
      let shopsView = StoryboardViewControllerResource<ShopsView>(identifier: "ShopsView")
      let sortByView = StoryboardViewControllerResource<SortByView>(identifier: "SortByView")
      let termsView = StoryboardViewControllerResource<TermsView>(identifier: "TermsView")
      let wishlistView = StoryboardViewControllerResource<WishlistView>(identifier: "WishlistView")

      func addAddressView(_: Void = ()) -> AddAddressView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addAddressView)
      }

      func addToBoxesView(_: Void = ()) -> AddToBoxesView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addToBoxesView)
      }

      func areasView(_: Void = ()) -> AreasView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: areasView)
      }

      func boxDetailsView(_: Void = ()) -> BoxDetailsView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: boxDetailsView)
      }

      func categoryDetailsView(_: Void = ()) -> CategoryDetailsView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: categoryDetailsView)
      }

      func changePassAlertController(_: Void = ()) -> ChangePassAlertController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePassAlertController)
      }

      func changePassView(_: Void = ()) -> ChangePassView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePassView)
      }

      func deliveryAddressView(_: Void = ()) -> DeliveryAddressView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deliveryAddressView)
      }

      func editAddressView(_: Void = ()) -> EditAddressView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editAddressView)
      }

      func editProfileView(_: Void = ()) -> EditProfileView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileView)
      }

      func featuredView(_: Void = ()) -> FeaturedView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: featuredView)
      }

      func filterByView(_: Void = ()) -> FilterByView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterByView)
      }

      func homeView(_: Void = ()) -> HomeView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeView)
      }

      func mainTabBarController(_: Void = ()) -> MainTabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBarController)
      }

      func myAddressView(_: Void = ()) -> MyAddressView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myAddressView)
      }

      func myOrdersView(_: Void = ()) -> MyOrdersView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myOrdersView)
      }

      func notificationsView(_: Void = ()) -> NotificationsView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationsView)
      }

      func orderDetailsView(_: Void = ()) -> OrderDetailsView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderDetailsView)
      }

      func ourBoxesView(_: Void = ()) -> OurBoxesView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ourBoxesView)
      }

      func productDetailsView(_: Void = ()) -> ProductDetailsView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productDetailsView)
      }

      func profileView(_: Void = ()) -> ProfileView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileView)
      }

      func searchResultView(_: Void = ()) -> SearchResultView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchResultView)
      }

      func searchView(_: Void = ()) -> SearchView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchView)
      }

      func shopDetailsView(_: Void = ()) -> ShopDetailsView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shopDetailsView)
      }

      func shopsView(_: Void = ()) -> ShopsView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shopsView)
      }

      func sortByView(_: Void = ()) -> SortByView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sortByView)
      }

      func termsView(_: Void = ()) -> TermsView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: termsView)
      }

      func wishlistView(_: Void = ()) -> WishlistView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: wishlistView)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Icon awesome-minus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon awesome-minus' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Icon open-plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon open-plus' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "No Address", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'No Address' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bell-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bell-1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "blank-Checkbox", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blank-Checkbox' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bottomBox", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bottomBox' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "close-button", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close-button' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "delivery-box", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delivery-box' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "delivery-box-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delivery-box-1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'down' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fav", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fav' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'filter' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "reorder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'reorder' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "settings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'settings' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sort", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sort' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "store", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'store' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "telephone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'telephone' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "trash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'trash' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Maetz-Light-Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Maetz-Light-Red' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Black' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Gradient", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Gradient' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Red' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-bg' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "lightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'lightGray' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().addAddressView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addAddressView' could not be loaded from storyboard 'Main' as 'AddAddressView'.") }
        if _R.storyboard.main().addToBoxesView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addToBoxesView' could not be loaded from storyboard 'Main' as 'AddToBoxesView'.") }
        if _R.storyboard.main().areasView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'areasView' could not be loaded from storyboard 'Main' as 'AreasView'.") }
        if _R.storyboard.main().boxDetailsView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'boxDetailsView' could not be loaded from storyboard 'Main' as 'BoxDetailsView'.") }
        if _R.storyboard.main().categoryDetailsView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'categoryDetailsView' could not be loaded from storyboard 'Main' as 'CategoryDetailsView'.") }
        if _R.storyboard.main().changePassAlertController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePassAlertController' could not be loaded from storyboard 'Main' as 'ChangePassAlertController'.") }
        if _R.storyboard.main().changePassView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePassView' could not be loaded from storyboard 'Main' as 'ChangePassView'.") }
        if _R.storyboard.main().deliveryAddressView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deliveryAddressView' could not be loaded from storyboard 'Main' as 'DeliveryAddressView'.") }
        if _R.storyboard.main().editAddressView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editAddressView' could not be loaded from storyboard 'Main' as 'EditAddressView'.") }
        if _R.storyboard.main().editProfileView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileView' could not be loaded from storyboard 'Main' as 'EditProfileView'.") }
        if _R.storyboard.main().featuredView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'featuredView' could not be loaded from storyboard 'Main' as 'FeaturedView'.") }
        if _R.storyboard.main().filterByView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterByView' could not be loaded from storyboard 'Main' as 'FilterByView'.") }
        if _R.storyboard.main().homeView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeView' could not be loaded from storyboard 'Main' as 'HomeView'.") }
        if _R.storyboard.main().mainTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBarController' could not be loaded from storyboard 'Main' as 'MainTabBarController'.") }
        if _R.storyboard.main().myAddressView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myAddressView' could not be loaded from storyboard 'Main' as 'MyAddressView'.") }
        if _R.storyboard.main().myOrdersView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myOrdersView' could not be loaded from storyboard 'Main' as 'MyOrdersView'.") }
        if _R.storyboard.main().notificationsView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationsView' could not be loaded from storyboard 'Main' as 'NotificationsView'.") }
        if _R.storyboard.main().orderDetailsView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderDetailsView' could not be loaded from storyboard 'Main' as 'OrderDetailsView'.") }
        if _R.storyboard.main().ourBoxesView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ourBoxesView' could not be loaded from storyboard 'Main' as 'OurBoxesView'.") }
        if _R.storyboard.main().productDetailsView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productDetailsView' could not be loaded from storyboard 'Main' as 'ProductDetailsView'.") }
        if _R.storyboard.main().profileView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileView' could not be loaded from storyboard 'Main' as 'ProfileView'.") }
        if _R.storyboard.main().searchResultView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchResultView' could not be loaded from storyboard 'Main' as 'SearchResultView'.") }
        if _R.storyboard.main().searchView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchView' could not be loaded from storyboard 'Main' as 'SearchView'.") }
        if _R.storyboard.main().shopDetailsView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shopDetailsView' could not be loaded from storyboard 'Main' as 'ShopDetailsView'.") }
        if _R.storyboard.main().shopsView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shopsView' could not be loaded from storyboard 'Main' as 'ShopsView'.") }
        if _R.storyboard.main().sortByView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sortByView' could not be loaded from storyboard 'Main' as 'SortByView'.") }
        if _R.storyboard.main().termsView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsView' could not be loaded from storyboard 'Main' as 'TermsView'.") }
        if _R.storyboard.main().wishlistView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'wishlistView' could not be loaded from storyboard 'Main' as 'WishlistView'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct offers: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Offers"
      let offerDetailsView = StoryboardViewControllerResource<OfferDetailsView>(identifier: "OfferDetailsView")
      let offersView = StoryboardViewControllerResource<OffersView>(identifier: "OffersView")

      func offerDetailsView(_: Void = ()) -> OfferDetailsView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: offerDetailsView)
      }

      func offersView(_: Void = ()) -> OffersView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: offersView)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Ellipse 19", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Ellipse 19' is used in storyboard 'Offers', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Icon awesome-minus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon awesome-minus' is used in storyboard 'Offers', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Icon open-plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon open-plus' is used in storyboard 'Offers', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in storyboard 'Offers', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Maetz-Light-Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Maetz-Light-Red' is used in storyboard 'Offers', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Black' is used in storyboard 'Offers', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Gradient", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Gradient' is used in storyboard 'Offers', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Red' is used in storyboard 'Offers', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-bg' is used in storyboard 'Offers', but couldn't be loaded.") }
        }
        if _R.storyboard.offers().offerDetailsView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'offerDetailsView' could not be loaded from storyboard 'Offers' as 'OfferDetailsView'.") }
        if _R.storyboard.offers().offersView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'offersView' could not be loaded from storyboard 'Offers' as 'OffersView'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct settings: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let changeLangController = StoryboardViewControllerResource<ChangeLangController>(identifier: "ChangeLangController")
      let contactUsController = StoryboardViewControllerResource<ContactUsController>(identifier: "ContactUsController")
      let name = "Settings"
      let pageController = StoryboardViewControllerResource<PageController>(identifier: "PageController")
      let settingsView = StoryboardViewControllerResource<SettingsView>(identifier: "SettingsView")

      func changeLangController(_: Void = ()) -> ChangeLangController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changeLangController)
      }

      func contactUsController(_: Void = ()) -> ContactUsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contactUsController)
      }

      func pageController(_: Void = ()) -> PageController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pageController)
      }

      func settingsView(_: Void = ()) -> SettingsView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsView)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Change Language", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Change Language' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Contact us", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Contact us' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "F", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'F' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "I", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'I' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Notifications", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Notifications' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "T", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'T' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-1' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "close-button", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close-button' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "selectRadio", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'selectRadio' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unchecked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unchecked' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "whatsapp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'whatsapp' is used in storyboard 'Settings', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Maetz-Light-Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Maetz-Light-Red' is used in storyboard 'Settings', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Black' is used in storyboard 'Settings', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Gradient", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Gradient' is used in storyboard 'Settings', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Red' is used in storyboard 'Settings', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-bg' is used in storyboard 'Settings', but couldn't be loaded.") }
        }
        if _R.storyboard.settings().changeLangController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changeLangController' could not be loaded from storyboard 'Settings' as 'ChangeLangController'.") }
        if _R.storyboard.settings().contactUsController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contactUsController' could not be loaded from storyboard 'Settings' as 'ContactUsController'.") }
        if _R.storyboard.settings().pageController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pageController' could not be loaded from storyboard 'Settings' as 'PageController'.") }
        if _R.storyboard.settings().settingsView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsView' could not be loaded from storyboard 'Settings' as 'SettingsView'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct wallet: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let errorRecharegeWalletView = StoryboardViewControllerResource<ErrorRecharegeWalletView>(identifier: "ErrorRecharegeWalletView")
      let name = "Wallet"
      let successRechargeWalletView = StoryboardViewControllerResource<SuccessRechargeWalletView>(identifier: "SuccessRechargeWalletView")
      let walletView = StoryboardViewControllerResource<WalletView>(identifier: "WalletView")

      func errorRecharegeWalletView(_: Void = ()) -> ErrorRecharegeWalletView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: errorRecharegeWalletView)
      }

      func successRechargeWalletView(_: Void = ()) -> SuccessRechargeWalletView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: successRechargeWalletView)
      }

      func walletView(_: Void = ()) -> WalletView? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletView)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_white_wallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_white_wallet' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "introLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'introLogo' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "orderError", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'orderError' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if UIKit.UIImage(named: "orderSuccess", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'orderSuccess' is used in storyboard 'Wallet', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Maetz-Light-Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Maetz-Light-Red' is used in storyboard 'Wallet', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Black' is used in storyboard 'Wallet', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Gradient", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Gradient' is used in storyboard 'Wallet', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-Red' is used in storyboard 'Wallet', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Meatz-bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Meatz-bg' is used in storyboard 'Wallet', but couldn't be loaded.") }
        }
        if _R.storyboard.wallet().errorRecharegeWalletView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'errorRecharegeWalletView' could not be loaded from storyboard 'Wallet' as 'ErrorRecharegeWalletView'.") }
        if _R.storyboard.wallet().successRechargeWalletView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'successRechargeWalletView' could not be loaded from storyboard 'Wallet' as 'SuccessRechargeWalletView'.") }
        if _R.storyboard.wallet().walletView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletView' could not be loaded from storyboard 'Wallet' as 'WalletView'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
